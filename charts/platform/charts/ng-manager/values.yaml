# Default values for ng-manager
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  autoscaling:
    enabled: false
  jfr:
    enabled: false
  kubeVersion: ""
  commonAnnotations: {}
  commonLabels: {}
  cg:
    enabled: false
  secrets:
    app:
      external:
        ## if FALSE, Generate all secrets within K8s Namespace
        ## If TRUE, use one of the followings kids to inject
        enabled: false
        kind:
          # use ExternalSecrets Operator
          externalSecrets: false
          # Use CSI Driver volume mount
          csiSecretDriver: false
    database:
      external:
        enabled: false
        kind:
          externalSecrets: false
          csiSecretDriver: false
  useExternalSecrets: false
  loadbalancerURL: ""
  monitoring:
    enabled: false
    managedPlatform: ""
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - protocol to use for connection
      protocol: postgres
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - extra arguments set to connection string
      extraArgs: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts:
        - dummy.net
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      # -- Enable TimescaleDB SSL
      sslEnabled: false
      # -- TimescaleDB secrets
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              TIMESCALEDB_USERNAME: ""
              TIMESCALEDB_PASSWORD: ""
              TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      certKey: ""
    alloydb:
      installed: true
      protocol: ""
      hosts: []
      extraArgs: ""
      database:
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              POSTGRES_USER: ""
              POSTGRES_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                POSTGRES_USER:
                  name: ""
                  property: ""
                POSTGRES_PASSWORD:
                  name: ""
                  property: ""
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      secretName: "redis-secret"
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      userKey: "redis-user"
      passwordKey: "redis-password"
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  license:
    cg: ''
    ng: ''
    secrets:
      kubernetesSecrets:
        - secretName: ""
          keys:
            NG_LICENSE: ""
      secretManagement:
        externalSecretsOperator:
          - secretStore:
              name: ""
              kind: ""
            remoteKeys:
              NG_LICENSE:
                name: ""
                property: ""
  ccm:
    enabled: false
  opa:
    enabled: false
  chaos:
    enabled: false
  stackDriverLoggingEnabled: false
  smtpCreateSecret:
    enabled: false
    SMTP_PASSWORD: ""
    SMTP_HOST: ""
    SMTP_USERNAME: ""
    SMTP_USE_SSL: "true"
    SMTP_PORT: "465"
    secrets:
      kubernetesSecrets:
        - secretName: ""
          keys:
            SMTP_USERNAME: ""
            SMTP_PASSWORD: ""
            SMTP_HOST: ""
            SMTP_PORT: ""
            SMTP_USE_SSL: ""
      secretManagement:
        externalSecretsOperator:
          - secretStore:
              name: ""
              kind: ""
            remoteKeys:
              SMTP_USERNAME:
                name: ""
                property: ""
              SMTP_PASSWORD:
                name: ""
                property: ""
              SMTP_HOST:
                name: ""
                property: ""
              SMTP_PORT:
                name: ""
                property: ""
              SMTP_USE_SSL:
                name: ""
                property: ""
  ingress:
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ''
    # -- add annotations to ingress objects
    objects:
      annotations: {}
    disableHostInIngress: false
    pathPrefix: ""
    pathType: ""
  istio:
    # -- create virtualServices objects
    enabled: false
    enableRegexRoutes: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      pathPrefix: ""
      gateways:
      hosts:
  proxy:
    enabled: false
    host: localhost
    port: 80
    username: ""
    password: ""
    protocol: http
  awsServiceEndpointUrls:
    enabled: false
    endPointRegion: us-east-2
    stsEndPointUrl: https://sts.us-east-2.amazonaws.com
    ecsEndPointUrl: https://ecs.us-east-2.amazonaws.com
    cloudwatchEndPointUrl: https://monitoring.us-east-2.amazonaws.com
  waitForInitContainer:
    enabled: true
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: "sha256:b8cb03089a08ff78bd59f9bdb29c9a0987517314e6f2245640d242345b9428dd"
      imagePullSecrets: []
  fileLogging:
    enabled: false
    logFilename: /opt/harness/logs/pod.log
    maxFileSize: 50MB
    maxBackupFileCount: 10
    totalFileSizeCap: 1GB
  pdb:
    create: false
progressDeadlineSeconds: 800
monitoring:
  port: 8889
  path: /metrics
timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
secondaryTimescaledb:
  # -- TimescaleDB host names
  hosts: []
  protocol: "jdbc:postgresql2312321"
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
database:
  mongo:
    ngharness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    notifications:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
  redis:
    events:
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
    lock:
      protocol: ""
      hosts: []
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  alloydb:
    harness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      database:
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              POSTGRES_USER: ""
              POSTGRES_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                POSTGRES_USER:
                  name: ""
                  property: ""
                POSTGRES_PASSWORD:
                  name: ""
                  property: ""
replicaCount: 1
updateStrategy:
  rollingUpdate:
    maxSurge: 100%
    maxUnavailable: 0
  type: RollingUpdate
podLabels: {}
oidc:
  enabled: true
licenseManager:
  enabled: false
maxUnavailable: 0
allowedOrigins: ""
appLogLevel: "INFO"
image:
  registry: docker.io
  repository: harness/ng-manager-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.84.4"
  digest: "sha256:d5db0166f0e67e717d5d4d92a2b2e7a90edec45e8c624ac392c7de52b55fa714"
  imagePullSecrets: []
initContainer:
  image:
    registry: docker.io
    repository: busybox
    tag: "1.37.0"
    digest: "sha256:f64ff79725d0070955b368a4ef8dc729bd8f3d8667823904adcb299fe58fc3da"
    imagePullSecrets: []
mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password
ceSecret:
  access_key:
    name: nextgen-ce
    key: AWS_ACCESS_KEY
  secret_key:
    name: nextgen-ce
    key: AWS_SECRET_KEY
  destination_bucket:
    name: nextgen-ce
    key: AWS_DESTINATION_BUCKET
  template_url:
    name: nextgen-ce
    key: AWS_TEMPLATE_LINK
ceGcpSetupConfigGcpProjectId: "placeHolderGcpProjectId"
timescaleSecret:
  password:
    name: harness-secrets
    key: timescaledbPostgresPassword
java:
  memory: "4096m"
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
imagePullSecrets: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext:
  runAsUser: 65534
  runAsNonRoot: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
probes:
  livenessProbe:
    httpGet:
      path: /admin/healthcheck/liveness
      port: 7458
      scheme: HTTP
    timeoutSeconds: 10
    periodSeconds: 60
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    httpGet:
      path: /health
      port: http-ng-manager
      scheme: HTTP
    timeoutSeconds: 1
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  startupProbe:
    httpGet:
      path: /health
      port: http-ng-manager
      scheme: HTTP
    initialDelaySeconds: 25
    timeoutSeconds: 1
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 40
service:
  annotations: {}
  type: ClusterIP
  protocol: TCP
  port: 7090
  grpcport: 9979
  gitsyncgrpcport: 13002
resources:
  limits:
    memory: 8192Mi
  requests:
    cpu: 2
    memory: 200Mi
autoscaling:
  enabled: false
  targetCPU: ""
  targetMemory: ""
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
terminationMessage: {}
nodeSelector: {}
tolerations: []
affinity: {}
additionalConfigs: {}
java17flags: ""
# extraVolumes:
# - name: volume-test
#   configMap:
#     name: test-config
#     readOnly: true
extraVolumes: []
# extraVolumeMounts:
# - name: test-volume-mount
#   mountPath: /opt/harness/config
extraVolumeMounts: []
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# extraEnvVars:
# - name: POD_NAME
#   valueFrom:
#     fieldRef:
#       fieldPath: metadata.name
extraEnvVars: []
virtualService:
  annotations: {}
  objects:
    - name: ng-manager
      pathMatchType: prefix
      pathRewrite: "/"
      paths:
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/ng/api/'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/ng/api'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/ng-dashboard/api/'
          backend:
            service:
              name: ng-dashboard-aggregator
              port: 7100
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/ng-dashboard/api'
          backend:
            service:
              name: ng-dashboard-aggregator
              port: 7100
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/ng/'
          backend:
            service:
              name: next-gen-ui
              port: 80
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/ng'
          backend:
            service:
              name: next-gen-ui
              port: 80
    - name: ng-manager-v1-apis
      pathMatchType: regex
      pathRewrite: "/\\1"
      paths:
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/secrets)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/secrets/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/secrets)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/secrets/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/secrets)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/secrets/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/connectors)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/connectors/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/connectors)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/connectors/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/connectors)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/connectors/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/services)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/services/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/services)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/services/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/services)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/services/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/ip-allowlist)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/ip-allowlist/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/favorites)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/favorites/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/eula/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/gitx-webhooks/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/gitx-webhooks)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/gitx-webhook-events)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/gitx-webhook-events/.+/validation-info)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/gitx-webhooks/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/gitx-webhooks)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/gitx-webhook-events)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/gitx-webhook-events/.+/validation-info)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/gitx-webhooks/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/gitx-webhooks)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/gitx-webhook-events)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/gitx-webhook-events/.+/validation-info)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/certificates)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/certificates/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/certificates)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/certificates/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/certificates)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/certificates/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/rancher/connectors/.+/clusters)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/rancher/connectors/.+/clusters)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/rancher/connectors/.+/clusters)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/rancher/environments/.+/infrastructure-definitions/.+/clusters)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/rancher/environments/.+/infrastructure-definitions/.+/clusters)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/rancher/environments/.+/infrastructure-definitions/.+/clusters)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/ldap-settings)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/ldap-settings/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/webhooks)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/webhooks)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/webhooks)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/webhooks/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/webhooks/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/webhooks/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/create-webhooks)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/create-webhooks)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/create-webhooks)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/webhooks/list)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/webhooks/list)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/webhooks/list)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/licenseUsageActivity)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/devSubscriptions)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/moduleLicenseUtilization)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/updateModuleAccess)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/listPrincipalsWithAccess)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/creditOverUsage)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/credits)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/licensedModules)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/dailyModuleAccountAccess)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/banners)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/banners/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/oidc-provider)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/oidc-provider/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/subscription/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/subscription/devops/.+)'
    - name: z-ng-manager-v1-apis
      pathMatchType: regex
      pathRewrite: "/\\1"
      paths:
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs)$'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/[^\/.]+)$'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects)$'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/[^\/.]+)$'
ingress:
  annotations: {}
  objects:
    - name: ng-manager
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$2
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/ng/api(/|$)(.*)'
    - name: ng-manager-v1-apis
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$1
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/secrets)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/secrets/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/secrets)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/secrets/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/secrets)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/secrets/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/connectors)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/connectors/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/connectors)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/connectors/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/connectors)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/connectors/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/services)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/services/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/services)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/services/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/services)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/services/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/ip-allowlist)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/ip-allowlist/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/favorites)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/favorites/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/eula/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/gitx-webhooks/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/gitx-webhooks)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/gitx-webhook-events)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/gitx-webhook-events/.+/validation-info)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/certificates)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/certificates/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/certificates)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/certificates/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/certificates)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/certificates/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/rancher/connectors/.+/clusters)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/rancher/connectors/.+/clusters)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/rancher/connectors/.+/clusters)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/rancher/environments/.+/infrastructure-definitions/.+/clusters)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/rancher/environments/.+/infrastructure-definitions/.+/clusters)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/rancher/environments/.+/infrastructure-definitions/.+/clusters)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/ldap-settings)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/ldap-settings/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/licenseUsageActivity/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/devSubscriptions)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/moduleLicenseUtilization)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/updateModuleAccess)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/listPrincipalsWithAccess)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/creditOverUsage/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/credits/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/webhooks)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/webhooks)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/webhooks)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/webhooks/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/webhooks/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/webhooks/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/create-webhooks)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/create-webhooks)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/create-webhooks)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/webhooks/list)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/webhooks/list)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/webhooks/list)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/licensedModules)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/dailyModuleAccountAccess)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/banners)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/banners/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/oidc-provider)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/oidc-provider/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/subscription/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/subscription/devops/.+)'
secrets:
  fileSecret: []
  conditions:
    CE_AWS_ACCESS_KEY: "global.ccm.enabled"
    CE_AWS_SECRET_KEY: "global.ccm.enabled"
  default:
    LOG_STREAMING_SERVICE_TOKEN: c76e567a-b341-404d-a8dd-d9738714eb82
    OPA_SERVER_SECRET: dOkdsVqdRPPRJG31XU0qY4MPqmBBMk0PTAGIKM6O7TGqhjyxScIdJe80mwh5Yb5zF3KxYBHw6B3Lfzlq
    GITOPS_SERVICE_SECRET: HVSKUYqD4e5Rxu12hFDdCJKGM64sxgEynvdDhaOHaTHhwwn0K4Ttr0uoOxSsEVYNrUU=
    CE_AWS_ACCESS_KEY: ""
    CE_AWS_SECRET_KEY: ""
    HSQS_AUTH_TOKEN: UeWgUReGXlbrB0zkDCBFz1EDfU1zrXbhAbGfQ8jsSCaA881SYFMlHqnn3OQnAKAU6hTQ5NniwuMeKSFW
    STRIPE_API_KEY: ""
    DEVOPS_STRIPE_API_KEY: ""
  kubernetesSecrets:
    - secretName: ""
      keys:
        LOG_STREAMING_SERVICE_TOKEN: ""
        OPA_SERVER_SECRET: ""
        GITOPS_SERVICE_SECRET: ""
        HSQS_AUTH_TOKEN: ""
        STRIPE_API_KEY: ""
        DEVOPS_STRIPE_API_KEY: ""
    - secretName: "nextgen-ce"
      keys:
        CE_AWS_ACCESS_KEY: "AWS_ACCESS_KEY"
        CE_AWS_SECRET_KEY: "AWS_SECRET_KEY"
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          LOG_STREAMING_SERVICE_TOKEN:
            name: ""
            property: ""
          OPA_SERVER_SECRET:
            name: ""
            property: ""
          GITOPS_SERVICE_SECRET:
            name: ""
            property: ""
          CE_AWS_ACCESS_KEY:
            name: ""
            property: ""
          CE_AWS_SECRET_KEY:
            name: ""
            property: ""
          HSQS_AUTH_TOKEN:
            name: ""
            property: ""
          STRIPE_API_KEY:
            name: ""
            property: ""
          DEVOPS_STRIPE_API_KEY:
            name: ""
            property: ""
config:
  EVENTS_FRAMEWORK_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  EVENTS_FRAMEWORK_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  EVENTS_FRAMEWORK_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME: harness-redis
  LOCK_CONFIG_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "lock") }}'
  LOCK_CONFIG_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  LOCK_CONFIG_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  LOCK_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  CACHE_BACKEND: REDIS
  ACCESS_CONTROL_BASE_URL: 'http://access-control.{{ .Release.Namespace }}.svc.cluster.local:9006/api/'
  ACCESS_CONTROL_ENABLED: "true"
  ALLOWED_ORIGINS: '{{ .Values.allowedOrigins | default .Values.global.loadbalancerURL }}'
  AUDIT_CLIENT_BASEURL: 'http://platform-service.{{ .Release.Namespace }}.svc.cluster.local:9005/api/'
  AUDIT_ENABLED: "true"
  AUTH_ENABLED: "true"
  AWS_SERVICE_ENDPOINT_URLS_CLOUDWATCH_ENDPOINT_URL: '{{ .Values.global.awsServiceEndpointUrls.cloudwatchEndPointUrl }}'
  AWS_SERVICE_ENDPOINT_URLS_ECS_ENDPOINT_URL: '{{ .Values.global.awsServiceEndpointUrls.ecsEndPointUrl }}'
  AWS_SERVICE_ENDPOINT_URLS_ENABLED: '{{ .Values.global.awsServiceEndpointUrls.enabled }}'
  AWS_SERVICE_ENDPOINT_URLS_ENDPOINT_REGION: '{{ .Values.global.awsServiceEndpointUrls.endPointRegion }}'
  AWS_SERVICE_ENDPOINT_URLS_STS_ENDPOINT_URL: '{{ .Values.global.awsServiceEndpointUrls.stsEndPointUrl }}'
  CENG_CLIENT_BASEURL: 'http://nextgen-ce.{{ .Release.Namespace }}.svc.cluster.local:6340/ccm/api/'
  CE_NG_CLIENT_BASEURL: 'http://nextgen-ce.{{ .Release.Namespace }}.svc.cluster.local:6340/ccm/api/'
  CE_SETUP_CONFIG_GCP_PROJECT_ID: '{{ .Values.ceGcpSetupConfigGcpProjectId }}'
  CHAOS_SERVICE_BASE_URL: 'http://chaos-web-service.{{ .Release.Namespace }}.svc.cluster.local:8184/'
  IRO_MANAGER_SERVICE_BASE_URL: 'http://iro-manager.{{ .Release.Namespace }}.svc.cluster.local:8080/'
  CI_MANAGER_SERVICE_CLIENT_BASEURL: http://ci-manager:7090/
  CURRENT_GEN_UI_URL: '{{ .Values.global.loadbalancerURL }}/#/'
  CVNG_SERVICE_CLIENT_BASEURL: http://cv-nextgen:6060/cv/api/
  DEPLOY_MODE: KUBERNETES_ONPREM
  DISTRIBUTED_LOCK_IMPLEMENTATION: "REDIS"
  ENABLE_DASHBOARD_TIMESCALE: "true"
  ENABLE_DEFAULT_RESOURCE_GROUP_CREATION: "true"
  ENFORCEMENT_CHECK_ENABLED: "true"
  GITOPS_SERVICE_CLIENT_BASEURL: http://gitops:7908/api/v1/
  GIT_SERVICE_CACHING_MAX_CACHE_DURATION: "2592000000"
  GIT_SERVICE_CACHING_VALID_CACHE_DURATION: "7200000"
  GRPC_SERVER_PORT: "9979"
  HARNESS_CODE_EXTERNAL_API_URL: '{{ .Values.global.loadbalancerURL }}/gateway/code/'
  HARNESS_CODE_GIT_URL: '{{ .Values.global.loadbalancerURL }}/code/git'
  HARNESS_ENABLE_NG_AUTH_UI_PLACEHOLDER: "true"
  HARNESS_NG_MANAGER_INTERNAL_URL: 'http://ng-manager.{{ .Release.Namespace }}.svc.cluster.local:7090'
  HARNESS_SCM_API_INTERNAL_URL: 'http://code-api.{{ .Release.Namespace }}.svc.cluster.local:80'
  HSQS_BASE_URL: 'http://queue-service:9091/'
  IACM_SERVICE_BASE_URL: 'http://iac-server.{{ .Release.Namespace }}.svc.cluster.local:8080/api/'
  IDP_SERVICE_CLIENT_BASE_URL: http://idp-service:12003/
  INTERNAL_MANAGER_AUTHORITY: '{{ ternary "harness-manager:9879" "dns:///harness-manager-headless:9879" .Values.global.istio.enabled }}'
  INTERNAL_MANAGER_TARGET: '{{ ternary "harness-manager:9879" "dns:///harness-manager-headless:9879" .Values.global.istio.enabled }}'
  INTERNAL_NG_MANAGER_AUTHORITY: '{{ ternary "ng-manager:13002" "dns:///ng-manager-headless:13002" .Values.global.istio.enabled }}'
  INTERNAL_NG_MANAGER_TARGET: '{{ ternary "ng-manager:13002" "dns:///ng-manager-headless:13002" .Values.global.istio.enabled }}'
  INTERNAL_PMS_AUTHORITY: '{{ ternary "pipeline-service:12011" "dns:///pipeline-service-headless:12011" .Values.global.istio.enabled }}'
  INTERNAL_PMS_GITSYNC_AUTHORITY: '{{ ternary "pipeline-service:14002" "dns:///pipeline-service-headless:14002" .Values.global.istio.enabled }}'
  INTERNAL_PMS_GITSYNC_TARGET: '{{ ternary "pipeline-service:14002" "dns:///pipeline-service-headless:14002" .Values.global.istio.enabled }}'
  INTERNAL_PMS_TARGET: '{{ ternary "pipeline-service:12011" "dns:///pipeline-service-headless:12011" .Values.global.istio.enabled }}'
  INTERNAL_TEMPLATE_GITSYNC_AUTHORITY: template-service:16002
  INTERNAL_TEMPLATE_GITSYNC_TARGET: template-service:16002
  JAVA_ADVANCED_FLAGS: '{{- include "harnesscommon.jfr.v1.printJavaAdvancedFlags" (dict "ctx" $) }}'
  LOGGING_LEVEL: '{{ .Values.appLogLevel }}'
  LOG_STREAMING_SERVICE_BASEURL: 'http://log-service.{{ .Release.Namespace }}.svc.cluster.local:8079/'
  MALLOC_ARENA_MAX: "4"
  MANAGER_AUTHORITY: harness-manager:9879
  MANAGER_CLIENT_BASEURL: http://harness-manager.{{ .Release.Namespace }}.svc.cluster.local:9090/api/
  MANAGER_TARGET: harness-manager:9879
  MANAGER_UI_URL: '{{ .Values.global.loadbalancerURL }}'
  MEMORY: '{{ .Values.java.memory }}'
  MOCK_ACCESS_CONTROL_SERVICE: "false"
  MONGO_MAX_DOCUMENT_LIMIT: "10000"
  MONGO_MAX_OPERATION_TIME_IN_MILLIS: "40000"
  MONGO_TRANSACTIONS_ALLOWED: "false"
  MONITORING_MANAGER_SERVICE_BASE_URL: 'http://monitoring-manager.{{ .Release.Namespace }}.svc.cluster.local:8092/'
  NG_MANAGER_API_URL: http://ng-manager:7090/
  NG_MANAGER_AUTHORITY: ng-manager:13002
  NG_MANAGER_CLIENT_BASEURL: http://ng-manager:7090/
  DBOPS_SERVICE_CLIENT_BASEURL: http://db-devops-service:5001/
  NG_MANAGER_TARGET: ng-manager:13002
  NG_MANAGER_UI_URL: '{{ .Values.global.loadbalancerURL }}/ng/#/'
  NEXT_GEN_UI_URL: '{{ .Values.global.loadbalancerURL }}/ng/#/'
  NOTIFICATION_BASE_URL: http://platform-service:9005/api/
  OIDC_CONFIG_PATH: /opt/harness/config
  DEVOPS_ESSENTIAL_CONFIG_PATH: /opt/harness/devops
  OPA_CONNECTIVITY_ENABLED: '{{.Values.global.opa.enabled }}'
  OPA_SERVER_BASEURL: 'http://policy-mgmt.{{ .Release.Namespace }}.svc.cluster.local:3000/'
  PIPELINE_SERVICE_CLIENT_BASEURL: http://pipeline-service:12001/api/
  PLAN_CREATOR_SERVICE_EXECUTOR_POOL_CORE_SIZE: "150"
  PLAN_CREATOR_SERVICE_EXECUTOR_POOL_MAX_SIZE: "200"
  PMS_AUTHORITY: pipeline-service:12011
  PMS_GITSYNC_AUTHORITY: pipeline-service:14002
  PMS_GITSYNC_TARGET: pipeline-service:14002
  PMS_TARGET: pipeline-service:12011
  PROXY_ENABLED: '{{ .Values.global.proxy.enabled }}'
  PROXY_HOST: '{{ .Values.global.proxy.host }}'
  PROXY_PASSWORD: '{{ .Values.global.proxy.password }}'
  PROXY_PORT: '{{ .Values.global.proxy.port }}'
  PROXY_PROTOCOL: '{{ .Values.global.proxy.protocol }}'
  PROXY_USERNAME: '{{ .Values.global.proxy.username }}'
  RESOURCE_GROUP_BASE_URL: 'http://platform-service.{{ .Release.Namespace }}.svc.cluster.local:9005/api/'
  SCM_SERVICE_URI: scm-service:8091
  SERVICE_DISCOVERY_SERVICE_BASE_URL: http://service-discovery-manager:8080/
  SHOULD_CONFIGURE_WITH_PMS: "true"
  STACK_DRIVER_LOGGING_ENABLED: '{{ .Values.global.stackDriverLoggingEnabled }}'
  STO_CORE_SERVICE_CLIENT_BASEURL: http://sto-core:4000/api/
  TEMPLATE_GITSYNC_AUTHORITY: template-service:16002
  TEMPLATE_GITSYNC_TARGET: template-service:16002
  TEMPLATE_SERVICE_ENDPOINT: http://template-service:15002/api/
  USE_QUEUE_SERVICE_FOR_GITX_WEBHOOK: "true"
  USE_REDIS_FOR_SDK_RESPONSE_EVENTS: "true"
  ENABLE_DEFAULT_USER_GROUPS_CREATION_JOB: "true"
  WEBHOOK_BASE_URL: '{{ .Values.global.loadbalancerURL }}/gateway/ng/api/'
  GRPC_MAX_CONNECTION_AGE: "30"
  REDISSON_PING_CONNECTION_INTERVAL_IN_MILLIS: "0"
  HARNESS_ARTIFACT_REGISTRY_SERVICE_URL: 'http://registry-api.{{ .Release.Namespace }}.svc.cluster.local:80'
  BITBUCKET_SERVER_OAUTH_CALLBACK_URL: ""
  GITLAB_ON_PREM_OAUTH_CALLBACK_URL: '{{ .Values.global.loadbalancerURL }}/gateway/api/secret/oauth2/gitlab_on_prem'
  PIPELINE_SDK_RESPONSE_EVENT_MAX_TOPIC_SIZE: "10000"
  PIPELINE_SDK_RESPONSE_SPAWN_EVENT_MAX_TOPIC_SIZE: "10000"
  PIPELINE_SDK_STEP_RESPONSE_EVENT_MAX_TOPIC_SIZE: "10000"
  GITOPS_RESOURCE_CLIENT_CONNECT_TIMEOUT_SECONDS: "15"
  PLATFORM_READ_TIMEOUT: "10"
  GITOPS_RESOURCE_CLIENT_READ_TIMEOUT_SECONDS: "15"
  ACCESS_CONTROL_READ_TIMEOUT: "10"
  STRIPE_IDEMPOTENCY_KEY: "sandboxIdempotencyKey"
  STRIPE_ACCOUNT: "sandboxAccount"
  STRIPE_INVOICE_EMAIL: "test@harness.io"
  STRIPE_DISABLE_METERS: "false"
  INSTANCE_SYNC_PERPETUAL_TASK_INTERVAL_SECONDS: "600"
  INSTANCE_SYNC_PERPETUAL_TASK_TIMEOUT_SECONDS: "600"
  IR_DCT_ENABLED: "true"
  IR_DCT_INITIAL_DELAY_SECONDS: "0"
  IR_DCT_SCHEDULER_PERIOD_SECONDS: "30"
  IR_DCT_LIMIT_PER_API_CALL: "25"
  IR_DCT_MAX_COUNT_PER_ITERATION: "100"
  IR_DCT_SLEEP_MILLI_SECONDS: "5000"
  CGI_TASK_CONFIG_PATH: "/opt/harness/cgi-config"
rbac:
  rules: []
jfr:
  image:
    registry: registry.access.redhat.com
    repository: ubi8/ubi-minimal
    pullPolicy: Always
    tag: "8.9-1029"
    digest: "sha256:87bcbfedfd70e67aab3875fff103bade460aeff510033ebb36b7efa009ab6639"
    imagePullSecrets: []
pdb:
  create: false
devopsEssentials:
  enabled: false
# CGI Configs
# To add a new CGI config, add a new entry under the executables section
# The key (name) of the entry should be the same as the one
# provided in the code. This will automatically generate the configs for CGIs
# For more information, consider this document
# https://harness.atlassian.net/wiki/spaces/PLATFORM/pages/22304555165/CGI+Tasks+Configuration+in+Helm+Charts
# What does each key mean
# basePath: The base URL where all the CGI configs are stored.
# binaryFolderPathOverride: the default value is taken as the key (name) of the CGI, this can be
# overriden using this.
# version: The version to be used. Update this whenever upgrading CGI
cgiConfig:
  basePath: "https://storage.googleapis.com/harness-qa-public/public/shared/cgi"
  executables:
    DockerRegistry:
      version: "0.0.1"
      binaryFolderPathOverride: ""
      binaries:
        darwin: ["amd64", "arm64"]
        linux: ["amd64", "arm64"]
        windows: ["amd64", "arm64"]
    Github:
      version: "0.0.1"
      binaryFolderPathOverride: ""
      binaries:
        darwin: ["amd64", "arm64"]
        linux: ["amd64", "arm64"]
        windows: ["amd64", "arm64"]
    AwsSecretManager:
      version: "0.0.1"
      binaryFolderPathOverride: ""
      binaries:
        darwin: ["amd64", "arm64"]
        linux: ["amd64", "arm64"]
        windows: ["amd64", "arm64"]
