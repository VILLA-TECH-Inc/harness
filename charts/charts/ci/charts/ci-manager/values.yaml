# Default values for ci-manager
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  jfr:
    enabled: false
  autoscaling:
    enabled: false
  pdb:
    create: false
  commonAnnotations: {}
  commonLabels: {}
  loadbalancerURL: ""
  loadbalancerContext: ""
  airgap: false
  imagePullSecrets: []
  stackDriverLoggingEnabled: false
  # configuration for enabling monitoring
  monitoring:
    enabled: false
    managedPlatform: ""
    port: 8889
    path: /metrics
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - protocol to use for connection
      protocol: postgres
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - extra arguments set to connection string
      extraArgs: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      # -- Enable TimescaleDB SSL
      sslEnabled: false
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      certKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              TIMESCALEDB_USERNAME: ""
              TIMESCALEDB_PASSWORD: ""
              TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  ingress:
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname

    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ''
    # -- add annotations to ingress objects
    objects:
      annotations: {}
    disableHostInIngress: false
    pathPrefix: ""
    pathType: ""
  istio:
    # -- create virtualServices objects
    enabled: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      gateways:
      hosts:
  ssca:
    enabled: false
  waitForInitContainer:
    enabled: true
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: "sha256:c06cab15920d2f99a000f913316a76cd867c73fc8d7b2e68ba4851b39e64aa97"
      imagePullSecrets: []
  fileLogging:
    enabled: false
    logFilename: /opt/harness/logs/pod.log
    maxFileSize: 50MB
    maxBackupFileCount: 10
    totalFileSizeCap: 1GB
enableAuth: true
replicaCount: 1
progressDeadlineSeconds: 600
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
image:
  registry: docker.io
  repository: harness/ci-manager-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.74.4"
  digest: "sha256:b2ec73aec0166818c8625448c0d379a139d24b6600001e7e76e096b74f651b91"
  imagePullSecrets: []
securityImage:
  image:
    registry: docker.io
    repository: harness/sto-plugin
    tag: latest # DO NOT OVERRIDE without checking in with STO team
    digest: "sha256:87615fc86e7902a4fcbfb24c19eaa1a45a2730b89652cfacb9f191f1ba70924d"
    imagePullSecrets: []
ci_images:
  addon:
    image:
      registry: docker.io
      digest: "sha256:62f3b5e034b6e215b1975aafb33b0aef3c50fee196753adc83e3339a4c8515ad"
      tag: "1.16.80"
      repository: harness/ci-addon
      imagePullSecrets: []
  addon_rootless:
    image:
      registry: docker.io
      digest: "sha256:e58fc70bdfe1aad6458474680cd741ab3067ceda91ba5d162e257f6fe05b4be7"
      tag: "rootless-1.16.80"
      repository: harness/ci-addon
      imagePullSecrets: []
  lite_engine:
    image:
      registry: docker.io
      digest: "sha256:fce3a53d5ee00ff83b7bd335e8685646cc2f609ca992638fa01ab29b316130f4"
      tag: "1.16.80"
      repository: harness/ci-lite-engine
      imagePullSecrets: []
  lite_engine_rootless:
    image:
      registry: docker.io
      digest: "sha256:2afad0df6108d017418102aaf5916ebc14813916df8fcde6ccd29990407cbe32"
      tag: "rootless-1.16.80"
      repository: harness/ci-lite-engine
      imagePullSecrets: []
  cache_proxy:
    image:
      registry: docker.io
      digest: "sha256:396fa74ac507c9949cf0d0ea42b525f2e89c518a975498d48640afa9bd1b7b89"
      tag: "1.6.0"
      repository: harness/harness-cache-server
      imagePullSecrets: []
  git_clone:
    image:
      registry: docker.io
      digest: "sha256:69c0e77158b28509454553f477f8ffb5e2bc41726b6f588a7881571ee5d8fa7b"
      tag: "1.6.7-rootless"
      repository: harness/drone-git
      imagePullSecrets: []
  kaniko:
    image:
      registry: docker.io
      digest: "sha256:aa3272192c9358f43c0ec628c06e253dadb08990a30f43dae169b8eba8cb1eb4"
      tag: "1.10.6"
      repository: plugins/kaniko
      imagePullSecrets: []
  kaniko_ecr:
    image:
      registry: docker.io
      digest: "sha256:dcd2a81fbaff5aff89bbc830202a9f90d64bd8960cc86bf7583db851cd5a3cb3"
      tag: "1.10.8"
      repository: plugins/kaniko-ecr
      imagePullSecrets: []
  kaniko_gcr:
    image:
      registry: docker.io
      digest: "sha256:fcc1d645f04abdbed542c9e9075081e509967529dbd786e7f514164eb49e6e46"
      tag: "1.10.1"
      repository: plugins/kaniko-gcr
      imagePullSecrets: []
  kaniko_acr:
    image:
      registry: docker.io
      digest: "sha256:0c6ef73208772c037fce0aa27fdfc0edfcbdd08f38e314528e864fa7b3a066ec"
      tag: "1.10.7"
      repository: plugins/kaniko-acr
      imagePullSecrets: []
  build_push_docker:
    image:
      registry: docker.io
      digest: "sha256:59c993e3c4e6c097a0e2d274419aac0d7d8e929773f0ba1af44078e54389834f"
      tag: "20.18.6"
      repository: plugins/docker
  build_push_ecr:
    image:
      registry: docker.io
      digest: "sha256:e7f8a901db201cfb40914d59b14dfb46a1b2dde407c99a643e5c6e4f82e57663"
      tag: "20.18.7"
      repository: plugins/ecr
  build_push_acr:
    image:
      registry: docker.io
      digest: "sha256:71b02927ba67e78eaf0f9501cac6e7f70afdada0517b97abbb2094575cba2bd5"
      tag: "20.18.8"
      repository: plugins/acr
  build_push_gcr:
    image:
      registry: docker.io
      digest: "sha256:ec1e32cc322a348dfc94b831e0537434b380fe15303fa9e8c16f6a483ba6a054"
      tag: "20.18.6"
      repository: plugins/gcr
  build_push_gar:
    image:
      registry: docker.io
      digest: "sha256:9991d63fd5a74826bd4b6ff530721c03628aac07f5421df4a9269be714d81a0c"
      tag: "20.18.6"
      repository: plugins/gar
  build_push_docker_dlc:
    image:
      registry: docker.io
      digest: "sha256:c17e791eb37488513324da58291f3da9c666398b219fd94fcf6c443b761d2f0f"
      tag: "1.2.2"
      repository: plugins/buildx
  build_push_ecr_dlc:
    image:
      registry: docker.io
      digest: "sha256:355619c0669ff44b87a9a95899a562002e579b470fadcbc6bae0dbf71fefc9ec"
      tag: "1.2.14"
      repository: plugins/buildx-ecr
  build_push_acr_dlc:
    image:
      registry: docker.io
      digest: "sha256:3b22d928337a414cfa72c4d25dc333786bb4903167e5bff76ba90da8a793a5d4"
      tag: "1.2.14"
      repository: plugins/buildx-acr
  build_push_gcr_dlc:
    image:
      registry: docker.io
      digest: "sha256:503e9612b3d2c49a51b98979d9572a86d204701386c98494ac7ae2f5b7357f38"
      tag: "1.2.11"
      repository: plugins/buildx-gcr
  build_push_gar_dlc:
    image:
      registry: docker.io
      digest: "sha256:c73a93315fc62bde1cebd141b62e31331974252e818cf3fac785acbe215b912c"
      tag: "1.2.14"
      repository: plugins/buildx-gar
  gcs_upload:
    image:
      registry: docker.io
      digest: "sha256:b9cf0976df9a00edcb9736599e8e79b2b92de0aa6857488d845382e4694c160d"
      tag: "1.6.3"
      repository: plugins/gcs
      imagePullSecrets: []
  s3_upload:
    image:
      registry: docker.io
      digest: "sha256:fb6f97dbab2191e0e31ccb808e1b19242a1d92a384f2714d6713e92b1dbf56e5"
      tag: "1.5.2"
      repository: plugins/s3
      imagePullSecrets: []
  artifactory_upload:
    image:
      registry: docker.io
      digest: "sha256:e142639fb5d0633f66943bc1b59e56c882d9c54fdf2e3576c583cfc1a14b4462"
      tag: "1.7.3"
      repository: plugins/artifactory
      imagePullSecrets: []
  gcs_cache:
    image:
      registry: docker.io
      digest: "sha256:0bb78336f810340fd016210508e01f13fe6143da08ec56d3d462978c93bb8493"
      tag: "1.9.6"
      repository: plugins/cache
      imagePullSecrets: []
  s3_cache:
    image:
      registry: docker.io
      digest: "sha256:0bb78336f810340fd016210508e01f13fe6143da08ec56d3d462978c93bb8493"
      tag: "1.9.6"
      repository: plugins/cache
      imagePullSecrets: []
  ssca_plugin:
    image:
      registry: docker.io
      digest: "sha256:1f11b8ac6490dd6284724f09f46d835a7b1695eafc0e55066a4373a67aef5e79"
      tag: "0.34.0"
      repository: harness/ssca-plugin
      imagePullSecrets: []
  slsa_plugin:
    image:
      registry: docker.io
      digest: "sha256:0acf63daefd3bba61f8058a54b807d49fa68cf2da42f32d4455ab2024e0b3872"
      tag: "0.34.0"
      repository: harness/slsa-plugin
      imagePullSecrets: []
  ssca_cdxgen_plugin:
    image:
      registry: docker.io
      digest: "sha256:c498477e9c441443f0ca1e6e222943d42a0918fd9ff8cdae230f236c1dd8aa08"
      tag: "0.34.1"
      repository: harness/ssca-cdxgen-plugin
      imagePullSecrets: []
  ssca_compliance_plugin:
    image:
      registry: docker.io
      digest: "sha256:ae318fbcec2fe45fd55c0f9d3dc7a69cf7e9e7d632dec61e0e19261b028dd782"
      tag: "0.34.0"
      repository: harness/ssca-compliance-plugin
      imagePullSecrets: []
  ssca_artifact_signing_plugin:
    image:
      registry: docker.io
      digest: "sha256:152687d49822a76f1b4b6167cf42dc3bffd37f51407b5ec2f39eb634c2f9583e"
      tag: "0.34.4"
      repository: harness/ssca-artifact-signing-plugin
      imagePullSecrets: []
mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password
timescaleSecret:
  password:
    name: harness-secrets
    key: timescaledbPostgresPassword
java:
  memory: 4096m
appLogLevel: INFO
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-default"
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
database:
  mongo:
    harness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    harnessci:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    pmsharness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
  redis:
    events:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        secret: ""
        enabled: false
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
    lock:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
    cache:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
securityContext:
  runAsUser: 65534
  runAsNonRoot: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
service:
  annotations: {}
  type: ClusterIP
  port: 7090
  grpcport: 9979
resources:
  limits:
    memory: 8192Mi
  requests:
    cpu: 1
    memory: 1400Mi
autoscaling:
  enabled: false
  targetCPU: 80
  targetMemory: ""
nodeSelector: {}
tolerations: []
affinity: {}
additionalConfigs: {}
java17flags: ""
# extraVolumes:
# - name: volume-test
#   configMap:
#     name: test-config
#     readOnly: true
extraVolumes: []
# extraVolumeMounts:
#   - name: test-volume-mount
#     mountPath: /opt/harness/config
extraVolumeMounts: []
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# extraEnvVars:
# - name: POD_NAME
#   valueFrom:
#     fieldRef:
#       fieldPath: metadata.name
extraEnvVars: []
virtualService:
  annotations: {}
  objects:
    - name: ci-manager
      pathMatchType: prefix
      pathRewrite: "/"
      paths:
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/ci/'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/ci'
ingress:
  annotations: {}
  objects:
    - annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$2
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/ci(/|$)(.*)'
secrets:
  default:
    LOG_SERVICE_GLOBAL_TOKEN: "c76e567a-b341-404d-a8dd-d9738714eb82"
    TI_SERVICE_GLOBAL_TOKEN: "59MR5RlVARcdH7zb7pNx6GzqiglBmXR8"
    CACHE_SERVICE_GLOBAL_TOKEN: "f47c6470-2483-4e06-8f44-3c35d6b55b26"
    HSQS_AUTH_TOKEN: "UeWgUReGXlbrB0zkDCBFz1EDfU1zrXbhAbGfQ8jsSCaA881SYFMlHqnn3OQnAKAU6hTQ5NniwuMeKSFW"
    OPA_SERVER_SECRET: "dOkdsVqdRPPRJG31XU0qY4MPqmBBMk0PTAGIKM6O7TGqhjyxScIdJe80mwh5Yb5zF3KxYBHw6B3Lfzlq"
    STO_SERVICE_GLOBAL_TOKEN: ""
    JWT_DATA_HANDLER_SECRET: "RdL7j9ZdCz6TVSHO7obJRS6ywYLJjH8tdfPP39i4MbevKjVodvjdhakdhashsh4371dasjldas"
  kubernetesSecrets:
    - secretName: ""
      keys:
        LOG_SERVICE_GLOBAL_TOKEN: ""
        TI_SERVICE_GLOBAL_TOKEN: ""
        CACHE_SERVICE_GLOBAL_TOKEN: ""
        OPA_SERVER_SECRET: ""
        JWT_DATA_HANDLER_SECRET: ""
    - secretName: "harness-secrets"
      keys:
        STO_SERVICE_GLOBAL_TOKEN: "stoAppHarnessToken"
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          LOG_SERVICE_GLOBAL_TOKEN:
            name: ""
            property: ""
          TI_SERVICE_GLOBAL_TOKEN:
            name: ""
            property: ""
          STO_SERVICE_GLOBAL_TOKEN:
            name: ""
            property: ""
          CACHE_SERVICE_GLOBAL_TOKEN:
            name: ""
            property: ""
          OPA_SERVER_SECRET:
            name: ""
            property: ""
          JWT_DATA_HANDLER_SECRET:
            name: ""
            property: ""
config:
  CACHE_BACKEND: REDIS
  CACHE_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  DEPLOY_MODE: KUBERNETES_ONPREM
  MANAGER_TARGET: harness-manager:9879
  MANAGER_AUTHORITY: harness-manager:9879
  INTERNAL_MANAGER_TARGET: '{{ ternary "harness-manager:9879" "dns:///harness-manager-headless:9879" .Values.global.istio.enabled }}'
  INTERNAL_MANAGER_AUTHORITY: '{{ ternary "harness-manager:9879" "dns:///harness-manager-headless:9879" .Values.global.istio.enabled }}'
  SCM_SERVICE_URI: scm-service:8091
  PMS_TARGET: pipeline-service:12011
  PMS_AUTHORITY: pipeline-service:12011
  EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME: harness-redis
  LOCK_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  SHOULD_CONFIGURE_WITH_PMS: "true"
  ENABLE_DASHBOARD_TIMESCALE: "true"
  USE_REDIS_FOR_SDK_RESPONSE_EVENTS: "true"
  MANAGER_URL: http://harness-manager:9090/api/
  OPA_SERVER_BASEURL: http://policy-mgmt:3000/
  LOG_SERVICE_INTERNAL_URL: http://log-service:8079/
  ACCESS_CONTROL_BASE_URL: http://access-control:9006/api/
  TI_SERVICE_INTERNAL_URL: http://ti-service:8078/
  CACHE_SERVICE_INTERNAL_ENDPOINT: http://cache-service:8082/
  GITNESS_INTERNAL_URL: http://code-api:80/
  ANCHORE_IMAGE: harness/anchore-job-runner:latest
  AWS_ECR_IMAGE: harness/aws-ecr-job-runner:latest
  AWS_SECURITY_HUB_IMAGE: harness/aws-security-hub-job-runner:latest
  AQUA_SECURITY_IMAGE: harness/aqua-security-job-runner:latest
  AQUA_TRIVY_IMAGE: harness/aqua-trivy-job-runner:latest
  BANDIT_IMAGE: harness/bandit-job-runner:latest
  BLACKDUCK_IMAGE: harness/blackduckhub-job-runner:latest
  BRAKEMAN_IMAGE: harness/brakeman-job-runner:latest
  STO_IMAGE: harness/sto-plugin:latest
  FOSSA_IMAGE: harness/fossa-job-runner:latest
  GRYPE_IMAGE: harness/grype-job-runner:latest
  NMAP_IMAGE: harness/nmap-job-runner:latest
  NIKTO_IMAGE: harness/nikto-job-runner:latest
  OSV_SCANNER_IMAGE: harness/osv-job-runner:latest
  OWASP_IMAGE: harness/owasp-dependency-check-job-runner:latest
  SYNK_IMAGE: harness/snyk-job-runner:latest
  SONARQUBE_IMAGE: harness/sonarqube-agent-job-runner:latest
  PROWLER_IMAGE: harness/prowler-job-runner:latest
  TWISTLOCK_IMAGE: harness/twistlock-job-runner:latest
  CHECKMARX_IMAGE: harness/checkmarx-job-runner:latest
  VERACODE_IMAGE: harness/veracode-agent-job-runner:latest
  WIZ_IMAGE: harness/wiz-job-runner:latest
  ZAP_IMAGE: harness/zap-job-runner:latest
  TRACEABLE_IMAGE: harness/traceable-job-runner:latest
  WHITE_SOURCE_IMAGE: harness/whitesource-agent-job-runner:latest
  ASYNC_DELEGATE_RESPONSE_THREAD_COUNT: "10"
  DISTRIBUTED_LOCK_IMPLEMENTATION: "REDIS"
  ENABLE_ASYNC_RESOURCE_CLEANUP: "true"
  ENABLE_QUEUE: "true"
  ENFORCEMENT_CHECK_ENABLED: "true"
  PLAN_CREATOR_SERVICE_EXECUTOR_POOL_CORE_SIZE: "150"
  PLAN_CREATOR_SERVICE_EXECUTOR_POOL_MAX_SIZE: "200"
  PMS_SDK_EXECUTION_POOL_CORE_SIZE: "300"
  PMS_SDK_EXECUTION_POOL_MAX_SIZE: "500"
  HSQS_BASE_URL: http://queue-service:9091/
  HARNESS_CODE_GIT_URL: '{{ .Values.global.loadbalancerURL }}/code/git'
  TI_SERVICE_ENDPOINT: '{{ .Values.global.loadbalancerURL }}/ti-service/'
  ACCESS_CONTROL_ENABLED: "true"
  FEATURE_FLAG_SYSTEM: "LOCAL"
  ENABLE_AUTH: '{{ .Values.enableAuth }}'
  GRPC_SERVER_PORT: '{{.Values.service.grpcport }}'
  ADDON_IMAGE: '{{ .Values.ci_images.addon.image.repository }}:{{ .Values.ci_images.addon.image.tag }}'
  ADDON_IMAGE_ROOTLESS: '{{ .Values.ci_images.addon_rootless.image.repository }}:{{ .Values.ci_images.addon_rootless.image.tag }}'
  LE_IMAGE: '{{ .Values.ci_images.lite_engine.image.repository }}:{{ .Values.ci_images.lite_engine.image.tag }}'
  LE_IMAGE_ROOTLESS: '{{ .Values.ci_images.lite_engine_rootless.image.repository }}:{{ .Values.ci_images.lite_engine_rootless.image.tag }}'
  CACHE_PROXY_IMAGE: '{{ .Values.ci_images.cache_proxy.image.repository }}:{{ .Values.ci_images.cache_proxy.image.tag }}'
  GIT_CLONE_IMAGE: '{{ .Values.ci_images.git_clone.image.repository }}:{{ .Values.ci_images.git_clone.image.tag }}'
  DOCKER_PUSH_IMAGE: '{{ .Values.ci_images.kaniko.image.repository }}:{{ .Values.ci_images.kaniko.image.tag }}'
  ECR_PUSH_IMAGE: '{{ .Values.ci_images.kaniko_ecr.image.repository }}:{{ .Values.ci_images.kaniko_ecr.image.tag }}'
  GCR_PUSH_IMAGE: '{{ .Values.ci_images.kaniko_gcr.image.repository }}:{{ .Values.ci_images.kaniko_gcr.image.tag }}'
  ACR_PUSH_IMAGE: '{{ .Values.ci_images.kaniko_acr.image.repository }}:{{ .Values.ci_images.kaniko_acr.image.tag }}'
  VM_DOCKER_PUSH_IMAGE: '{{ .Values.ci_images.build_push_docker.image.repository }}:{{ .Values.ci_images.build_push_docker.image.tag }}'
  VM_ECR_PUSH_IMAGE: '{{ .Values.ci_images.build_push_ecr.image.repository }}:{{ .Values.ci_images.build_push_ecr.image.tag }}'
  VM_ACR_PUSH_IMAGE: '{{ .Values.ci_images.build_push_acr.image.repository }}:{{ .Values.ci_images.build_push_acr.image.tag }}'
  VM_GCR_PUSH_IMAGE: '{{ .Values.ci_images.build_push_gcr.image.repository }}:{{ .Values.ci_images.build_push_gcr.image.tag }}'
  VM_GAR_PUSH_IMAGE: '{{ .Values.ci_images.build_push_gar.image.repository }}:{{ .Values.ci_images.build_push_gar.image.tag }}'
  BUILD_PUSH_DOCKER_DLC_IMAGE: '{{ .Values.ci_images.build_push_docker_dlc.image.repository }}:{{ .Values.ci_images.build_push_docker_dlc.image.tag }}'
  BUILD_PUSH_ECR_DLC_IMAGE: '{{ .Values.ci_images.build_push_ecr_dlc.image.repository }}:{{ .Values.ci_images.build_push_ecr_dlc.image.tag }}'
  BUILD_PUSH_ACR_DLC_IMAGE: '{{ .Values.ci_images.build_push_acr_dlc.image.repository }}:{{ .Values.ci_images.build_push_acr_dlc.image.tag }}'
  BUILD_PUSH_GCR_DLC_IMAGE: '{{ .Values.ci_images.build_push_gcr_dlc.image.repository }}:{{ .Values.ci_images.build_push_gcr_dlc.image.tag }}'
  BUILD_PUSH_GAR_DLC_IMAGE: '{{ .Values.ci_images.build_push_gar_dlc.image.repository }}:{{ .Values.ci_images.build_push_gar_dlc.image.tag }}'
  GCS_UPLOAD_IMAGE: '{{ .Values.ci_images.gcs_upload.image.repository }}:{{ .Values.ci_images.gcs_upload.image.tag }}'
  S3_UPLOAD_IMAGE: '{{ .Values.ci_images.s3_upload.image.repository }}:{{ .Values.ci_images.s3_upload.image.tag }}'
  ARTIFACTORY_UPLOAD_IMAGE: '{{ .Values.ci_images.artifactory_upload.image.repository }}:{{ .Values.ci_images.artifactory_upload.image.tag }}'
  GCS_CACHE_IMAGE: '{{ .Values.ci_images.gcs_cache.image.repository }}:{{ .Values.ci_images.gcs_cache.image.tag }}'
  S3_CACHE_IMAGE: '{{ .Values.ci_images.s3_cache.image.repository }}:{{ .Values.ci_images.s3_cache.image.tag }}'
  SECURITY_IMAGE: '{{ .Values.securityImage.image.repository }}:{{ .Values.securityImage.image.tag }}'
  LOGGING_LEVEL: '{{ .Values.appLogLevel }}'
  MEMORY: '{{ .Values.java.memory }}'
  NG_MANAGER_URL: 'http://ng-manager:7090/'
  LOG_SERVICE_ENDPOINT: '{{ .Values.global.loadbalancerURL }}/log-service/'
  CACHE_SERVICE_ENDPOINT: '{{ .Values.global.loadbalancerURL }}/cache-service/'
  API_URL: '{{ .Values.global.loadbalancerURL }}/ng/'
  STO_SERVICE_ENDPOINT: '{{ .Values.global.loadbalancerURL }}{{ .Values.global.loadbalancerContext }}/sto/'
  STO_SERVICE_INTERNAL_ENDPOINT: 'http://sto-core.{{ .Release.Namespace }}.svc.cluster.local:4000/'
  STACK_DRIVER_LOGGING_ENABLED: '{{ .Values.global.stackDriverLoggingEnabled }}'
  EVENTS_FRAMEWORK_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  EVENTS_FRAMEWORK_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  EVENTS_FRAMEWORK_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  LOCK_CONFIG_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  LOCK_CONFIG_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "lock") }}'
  LOCK_CONFIG_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "lock") }}'
  CACHE_CONFIG_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache") }}'
  CACHE_CONFIG_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  CACHE_CONFIG_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache") }}'
  INTERNAL_PMS_TARGET: '{{ ternary "pipeline-service:12011" "dns:///pipeline-service-headless:12011" .Values.global.istio.enabled }}'
  INTERNAL_PMS_AUTHORITY: '{{ ternary "pipeline-service:12011" "dns:///pipeline-service-headless:12011" .Values.global.istio.enabled }}'
  GRPC_MAX_CONNECTION_AGE: "30"
  REDISSON_PING_CONNECTION_INTERVAL_IN_MILLIS: "0"
  JAVA_ADVANCED_FLAGS: '{{- include "harnesscommon.jfr.v1.printJavaAdvancedFlags" (dict "ctx" $) }}'
  PIPELINE_SDK_RESPONSE_EVENT_MAX_TOPIC_SIZE: "10000"
  PIPELINE_SDK_RESPONSE_SPAWN_EVENT_MAX_TOPIC_SIZE: "10000"
  PIPELINE_SDK_STEP_RESPONSE_EVENT_MAX_TOPIC_SIZE: "10000"
rbac:
  rules: []
probes:
  readinessProbe:
    httpGet:
      path: /health
      port: http-ci-manager
    initialDelaySeconds: 60
    timeoutSeconds: 5
    periodSeconds: 5
    failureThreshold: 8
  livenessProbe:
    httpGet:
      path: /health/liveness
      port: http-ci-manager
    initialDelaySeconds: 40
    timeoutSeconds: 5
    periodSeconds: 10
    failureThreshold: 20
pdb:
  create: false
jfr:
  image:
    registry: registry.access.redhat.com
    repository: ubi8/ubi-minimal
    pullPolicy: Always
    tag: "8.9-1029"
    digest: "sha256:87bcbfedfd70e67aab3875fff103bade460aeff510033ebb36b7efa009ab6639"
    imagePullSecrets: []
