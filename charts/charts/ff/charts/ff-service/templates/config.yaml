apiVersion: v1
kind: ConfigMap
metadata:
  name: ff-service
  namespace: '{{ .Release.Namespace }}'
  {{- if .Values.global.commonLabels }}
  labels:
    {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 4 }}
  {{- end }}
  {{- if .Values.global.commonAnnotations }}
  annotations: {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  DB_MIGRATION_WAIT_TIMEOUT: 300s
  DEPLOY_MODE: KUBERNETES_ONPREM
  MEMORY: '{{ .Values.memory }}m'
  DB_DRIVER: postgres
  EVENT_BUS: "msg-broker"
  MSG_BROKER_PROVIDER: redis
  # Protocol needs to be set to empty because service uses redis library which doesn't accept protocol based strings
  MSG_BROKER_URL: {{ include "harnesscommon.dbconnectionv2.redisConnection" (dict "context" $ "unsetProtocol" true) }}
  REDIS_STREAM_MAX_LENGTH: "2048"
  REDIS_STREAM_APPROX_LENGTH: "true"
  REDIS_STREAM_VISIBILITY_TIMEOUT: 5s
  REDIS_STREAM_BLOCKING_TIMEOUT: 10s
  REDIS_STREAM_RECLAIM_INTERVAL: 5s
  REDIS_STREAM_BUFFER_SIZE: "100"
  REDIS_STREAM_CONCURRENCY: "100"
  EVENTS_FRAMEWORK_REDIS_SSL_ENABLED: "false"
  EVENTS_FRAMEWORK_USE_REDIS_PASSWORD: '{{ not .Values.global.database.redis.installed }}'
  EVENTS_FRAMEWORK_REDIS_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  EVENTS_FRAMEWORK_REDIS_SENTINEL_MASTER: 'harness-redis'
  REDIS_URL: {{ include "harnesscommon.dbconnectionv2.redisConnection" (dict "context" $ "unsetProtocol" true) }}
  EVENTS_FRAMEWORK_REDIS_SENTINEL_URLS: {{ include "harnesscommon.dbconnectionv2.redisConnection" (dict "context" $ "unsetProtocol" true) }}
  GRIP_URL: "http://pushpin-clusterip:5561"
  PLATFORM_INTEGRATION_ENABLED: "true"
  PLATFORM_BASE_URL: 'http://ng-manager.{{ .Release.Namespace }}.svc.cluster.local:7090'
  ADMIN_ENABLE: "true"
  CLIENT_ENABLE: "true"
  METRICS_ENABLE: "true"
  METRICS_PROCESSING: "true"
  ANALYTICS_DB_DRIVER: postgres
  LOG_LEVEL: {{ .Values.appLogLevel }}
  USE_CF_REDIS: {{ not .Values.global.database.redis.installed | quote }}
  CF_REDIS_SENTINEL_MASTER: harness-redis
  CF_REDIS_SENTINEL_URLS: {{ include "harnesscommon.dbconnectionv2.redisConnection" (dict "context" $ "unsetProtocol" true) }}
  CF_REDIS_URL: {{ include "harnesscommon.dbconnectionv2.redisConnection" (dict "context" $ "unsetProtocol" true) }}
  CF_REDIS_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  CF_REDIS_USE_PASSWORD: {{ include "harnesscommon.dbconnectionv2.isRedisPasswordSet" (dict "context" $ "passwordVariableName" "CF_REDIS_PASSWORD") | quote }}
  CUSTOM_RULES_ENABLED: "true"
  CACHE_PROVIDER_URLS: {{ include "harnesscommon.dbconnectionv2.redisConnection" (dict "context" $ "unsetProtocol" true) }}
  ACCESS_CONTROL_SERVICE: 'http://access-control.{{ .Release.Namespace }}.svc.cluster.local:9006'
  ACCESS_CONTROL_BASE_PATH: "/api"
  GIT_SYNC_URL: "ng-manager:13002"
  GIT_SYNC_AUTHORITY: "ng-manager:13002"
  GIT_SYNC_ENABLED: "true"
  GIT_SYNC_WEBHOOK_LISTEN_ADDR: "localhost:3001"
  PIPELINE_BASE_URL: 'http://pipeline-service.{{ .Release.Namespace }}.svc.cluster.local:12001/api'
  SEGMENT_API_KEY: CFCommonVariable
  ANALYTICS_DB_HOST: {{ include "harnesscommon.dbconnectionv2.timescaleHost" (dict "context" $) }}
  ANALYTICS_DB_PORT: {{ include "harnesscommon.dbconnectionv2.timescalePort" (dict "context" $) | quote }}
  ANALYTICS_DB_NAME: harnesscf
  DB_HOST: {{ include "harnesscommon.dbconnectionv2.timescaleHost" (dict "context" $) }}
  DB_NAME: cf_db
  DB_PORT: {{ include "harnesscommon.dbconnectionv2.timescalePort" (dict "context" $) | quote }}
  {{- if .Values.global.opa.enabled }}
  POLICY_MGMT_SERVICE_URL: 'http://policy-mgmt.{{ .Release.Namespace }}.svc.cluster.local:3000/'
  POLICY_MGMT_ENABLED: 'true'
  PLATFORM_SERVICE_URL: 'http://platform-service.{{ .Release.Namespace }}.svc.cluster.local:9005'
  {{- end }}
  {{- if .Values.additionalConfigs }}
  {{- toYaml .Values.additionalConfigs | nindent 2 }}
  {{- end }}
