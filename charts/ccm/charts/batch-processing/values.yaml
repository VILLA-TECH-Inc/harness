# Default values for batch-processing
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  pdb:
    create: false
  commonAnnotations: {}
  commonLabels: {}
  loadbalancerURL: "https://test"
  monitoring:
    enabled: false
    port: 8889
    managedPlatform: ""
    path: /metrics
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - database name used to connect to a specific Postgres database
      databaseName: ""
      ## - extra arguments set to connection string
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              POSTGRES_USER: ""
              POSTGRES_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                POSTGRES_USER:
                  name: ""
                  property: ""
                POSTGRES_PASSWORD:
                  name: ""
                  property: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts:
        - dummy.net
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      certKey: ""
      # -- Enable TimescaleDB SSL
      sslEnabled: false
      # -- TimescaleDB secrets
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              TIMESCALEDB_USERNAME: ""
              TIMESCALEDB_PASSWORD: ""
              TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
    clickhouse:
      enabled: false
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              CLICKHOUSE_USERNAME: ""
              CLICKHOUSE_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                CLICKHOUSE_USERNAME:
                  name: ""
                  property: ""
                CLICKHOUSE_PASSWORD:
                  name: ""
                  property: ""
  ingress:
    enabled: false
    className: harness
    hosts:
      - my-host.example.org
    tls:
      enabled: true
      secretName: ''
  smtpCreateSecret:
    enabled: false
    SMTP_PASSWORD: ""
    SMTP_HOST: ""
    SMTP_USERNAME: ""
    SMTP_USE_SSL: "true"
    SMTP_PORT: "465"
    secrets:
      kubernetesSecrets:
        - secretName: ""
          keys:
            SMTP_USERNAME: ""
            SMTP_PASSWORD: ""
            SMTP_HOST: ""
            SMTP_PORT: ""
            SMTP_USE_SSL: ""
      secretManagement:
        externalSecretsOperator:
          - secretStore:
              name: ""
              kind: ""
            remoteKeys:
              SMTP_USERNAME:
                name: ""
                property: ""
              SMTP_PASSWORD:
                name: ""
                property: ""
              SMTP_HOST:
                name: ""
                property: ""
              SMTP_PORT:
                name: ""
                property: ""
              SMTP_USE_SSL:
                name: ""
                property: ""
  ccm:
    gcpProjectId: "placeHolder"
    governance:
      enabled: false
  # image pull secrets to use for every image
  imagePullSecrets: []
  stackDriverLoggingEnabled: false
  proxy:
    enabled: false
    host: localhost
    port: 80
    username: ""
    password: ""
    protocol: http
  awsServiceEndpointUrls:
    enabled: false
    endPointRegion: us-east-2
    stsEndPointUrl: https://sts.us-east-2.amazonaws.com
    ecsEndPointUrl: https://ecs.us-east-2.amazonaws.com
    cloudwatchEndPointUrl: https://monitoring.us-east-2.amazonaws.com
  deployMode: KUBERNETES_ONPREM
  waitForInitContainer:
    enabled: true
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: "sha256:c06cab15920d2f99a000f913316a76cd867c73fc8d7b2e68ba4851b39e64aa97"
replicaCount: 1
isolatedReplica: 0
java:
  memory: "7168"
database:
  mongo:
    harness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    events:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
secondaryTimescaledb:
  # -- TimescaleDB host names
  hosts: []
  protocol: "jdbc:postgresql2312321"
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
image:
  registry: docker.io
  repository: harness/batch-processing-signed
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.44.4"
  digest: "sha256:f733334325176e82c7cc1d6b221b82ba0e0af305322d0211bcfd89adc22af047"
  # image pull secrets to use for batch-processing image
  imagePullSecrets: []
imageAzureDataPipeline:
  registry: docker.io
  repository: harness/ccm-azure-smp-signed
  pullPolicy: Always
  tag: "10006"
  digest: "sha256:91da4992face71689c0152b3acf030470fd7f103f79bdc77391d58445b1bdfb6"
  imagePullSecrets: []
imageGCPDataPipeline:
  registry: docker.io
  repository: harness/ccm-gcp-smp-signed
  pullPolicy: Always
  tag: "100039"
  digest: "sha256:11d31eaea0ae1859ebfe8f4fcacf0e4e6d68abdb3093146662bf88db46807455"
  imagePullSecrets: []
mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password
timescaleSecret:
  password:
    name: harness-secrets
    key: timescaledbPostgresPassword
smtp:
  host: ""
  password: ""
  user: ""
ceBatchGCPCredentials: ""
ceGCPHomeProjectCreds: ""
storageObjectAdmin: ""
gcpConfig:
  GCP_SMP_ENABLED: false
  bucketNamePrefix: "harness-ccm-%s-%s"
gcpSyncSmpConfig:
  gcpFreshSyncIntervalInDays: ""
  gcpBillingSyncIntervalInDays: ""
awsSecret:
  S3_SYNC_CONFIG_ACCESSKEY: ""
  S3_SYNC_CONFIG_SECRETKEY: ""
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: false
  annotations: {}
  name: "harness-default"
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
service:
  annotations: {}
  type: ClusterIP
  port: 6340
  metrics:
    port: 8889
    name: "metrics"
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 100
  targetCPU: ""
  targetMemory: ""
nodeSelector: {}
tolerations: []
affinity: {}
cloudProviderConfig:
  DATA_PIPELINE_CONFIG_GCS_BASE_PATH: "gs://awscustomerbillingdata-onprem"
  CLUSTER_DATA_GCS_BUCKET: "clusterdata-onprem"
  CLUSTER_DATA_GCS_BACKUP_BUCKET: "clusterdata-onprem-backup"
  S3_SYNC_CONFIG_BUCKET_NAME: "ccm-service-data-bucket"
  S3_SYNC_CONFIG_REGION: "us-east-1"
  AWS_S3_SYNC_TIMEOUT_MINUTES: 60
azureConfig:
  AZURE_SMP_ENABLED: false
  AZURE_SMP_REPORT_RETRIES: 5
  AZURE_SMP_HISTORY_TIME_DELTA: 1
  HARNESS_CE_AZURE_CONTAINER_NAME: ""
  HARNESS_CE_AZURE_STORAGE_NAME: ""
  HARNESS_CE_AZURE_IS_SYNC_JOB_DISABLED: ""
awsAccountTagsCollectionJobConfig:
  enabled: true
clickhouse:
  sendReceiveTimeout: "86400"
  socketTimeout: "86400000"
  queryRetries: "3"
  username: "default"
  password:
    name: clickhouse
    key: admin-password
workloadIdentity:
  enabled: false
cliProxy:
  enabled: false
  host: localhost
  port: 80
  username: ""
  password: ""
  protocol: http
resources:
  limits:
    memory: "10Gi"
  requests:
    cpu: "1024m"
    memory: "10Gi"
azureCronJobResources:
  limits:
    memory: "2Gi"
  requests:
    cpu: "1"
    memory: "2Gi"
additionalConfigs: {}
postgres:
  image:
    registry: "docker.io"
    repository: "bitnami/postgresql"
    tag: "14.11.0-debian-11-r17"
    digest: "sha256:2dddf267983fd5cb0c90086f8b2eddccd19e51e543c88683dfc45ab160966503"
  ## - protocol to use for connection
  enabled: false
  ## Enable Initialization of Postgres DB. (batch_ccm)
  initializeDb: true
  ## - host array for external
  hosts: []
  extraArgs: ""
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          POSTGRES_USER: ""
          POSTGRES_PASSWORD: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            POSTGRES_USER:
              name: ""
              property: ""
            POSTGRES_PASSWORD:
              name: ""
              property: ""
batchJobRepository:
  metadataCleanupSchedule: "0 30 * * * ?"
  dataRetentionPeriodInDays: 7
livenessProbe:
  enabled: true
  path: "/health"
  initialDelaySeconds: 90
  periodSeconds: 60
  timeoutSeconds: 5
  failureThreshold: 3
java17flags: "--illegal-access=debug --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens java.base/java.time=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.lang.invoke=ALL-UNNAMED --add-opens java.base/java.math=ALL-UNNAMED --add-opens java.base/java.nio.file=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED --add-opens java.xml/com.sun.org.apache.xpath.internal=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-exports java.xml/com.sun.org.apache.xerces.internal.parsers=ALL-UNNAMED --add-exports java.base/sun.nio.ch=ALL-UNNAMED"
# extraVolumes:
#   - name: volume-test
#     configMap:
#       name: test-config
#       # readOnly: true
extraVolumes: []
# extraVolumeMounts:
#   - name: volume-test
#     mountPath: /opt/harness/config
extraVolumeMounts: []
lifecycleHooks: {}
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# application level secrets
terminationGracePeriodSeconds: 30
secrets:
  fileSecret:
    - volumeMountPath: "/opt/harness/svc"
      keys:
        - key: cloud-data-store
          path: "cloud_data_store.json"
  conditions:
    FAKTORY_PASSWORD: "global.ccm.governance.enabled"
  default:
    NEXT_GEN_MANAGER_SECRET: IC04LYMBf1lDP5oeY4hupxd4HJhLmN6azUku3xEbeE3SUx5G3ZYzhbiwVtK4i7AmqyU9OZkwB4v8E9qM
    CE_NG_SERVICE_SECRET: IC04LYMBf1lDP5oeY4hupxd4HJhLmN6azUku3xEbeE3SUx5G3ZYzhbiwVtK4i7AmqyU9OZkwB4v8E9qM
    HARNESS_CE_AZURE_CLIENTSECRET: "placeHolder"
    HARNESS_CE_AZURE_SAS: "placeholder"
    HARNESS_CE_AZURE_CLIENTID: "placeholder"
    HARNESS_CE_AZURE_TENANTID: "placeholder"
    HMAC_ACCESS_KEY: "placeholder"
    HMAC_SECRET_KEY: "placeholder"
    S3_SYNC_CONFIG_ACCESSKEY: "placeholder"
    S3_SYNC_CONFIG_SECRETKEY: "placeholder"
    CF_CLIENT_API_KEY: "BATCH_PROCESSING_ON_PREM"
    cloud-data-store: ""
    ACCESS_CONTROL_SECRET: "IC04LYMBf1lDP5oeY4hupxd4HJhLmN6azUku3xEbeE3SUx5G3ZYzhbiwVtK4i7AmqyU9OZkwB4v8E9qM"
    FAKTORY_PASSWORD: ""
  kubernetesSecrets:
    - secretName: ""
      keys:
        NEXT_GEN_MANAGER_SECRET: ""
        CE_NG_SERVICE_SECRET: ""
        S3_SYNC_CONFIG_ACCESSKEY: ""
        S3_SYNC_CONFIG_SECRETKEY: ""
        HARNESS_CE_AZURE_CLIENTSECRET: ""
        HARNESS_CE_AZURE_SAS: ""
        HARNESS_CE_AZURE_CLIENTID: ""
        HARNESS_CE_AZURE_TENANTID: ""
        HMAC_ACCESS_KEY: ""
        HMAC_SECRET_KEY: ""
        ACCESS_CONTROL_SECRET: ""
    - secretName: ""
      keys:
        FAKTORY_PASSWORD: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          NEXT_GEN_MANAGER_SECRET:
            name: ""
            property: ""
          CE_NG_SERVICE_SECRET:
            name: ""
            property: ""
          S3_SYNC_CONFIG_ACCESSKEY:
            name: ""
            property: ""
          S3_SYNC_CONFIG_SECRETKEY:
            name: ""
            property: ""
          HARNESS_CE_AZURE_CLIENTSECRET:
            name: ""
            property: ""
          HARNESS_CE_AZURE_SAS:
            name: ""
            property: ""
          HARNESS_CE_AZURE_CLIENTID:
            name: ""
            property: ""
          HARNESS_CE_AZURE_TENANTID:
            name: ""
            property: ""
          HMAC_ACCESS_KEY:
            name: ""
            property: ""
          HMAC_SECRET_KEY:
            name: ""
            property: ""
          ACCESS_CONTROL_SECRET:
            name: ""
            property: ""
          FAKTORY_PASSWORD:
            name: ""
            property: ""
governance:
  awsRecommendationJobEnabled: false
  azureRecommendationJobEnabled: false
  gcpRecommendationJobEnabled: false
  bqLoadJobConfigEnabled: false
  awsRecommendationJobCron: 0 0 0 * * *
  azureRecommendationJobCron: 0 0 4 * * *
  gcpRecommendationJobCron: 0 0 8 * * *
  ootbAccount: kmpySmUISimoRrJL6NL73w
  governanceRecommendationMinCostForMonth: 300
  governanceRecommendationAccountAndRegionLimit: 500
  governanceRecommendationHealthUpdateAwsCron: 0 30 2 * * *
  governanceRecommendationHealthUpdateAzureCron: 0 30 6 * * *
  governanceRecommendationHealthUpdateGcpCron: 0 30 10 * * *
  governanceMinCostPerRecommendationLimit: 10
  governanceRecommendationHealthUpdateEnabledAws: false
  governanceRecommendationHealthUpdateEnabledAzure: false
  governanceRecommendationHealthUpdateEnabledGcp: false
  enforcementRecommendationEnabled: false
  enforcementMinCost: 300
  awsEnforcementRecommendationJobCron: 0 0 8 * * *
  azureEnforcementRecommendationJobCron: 0 0 9 * * *
  gcpEnforcementRecommendationJobCron: 0 0 10 * * *
recommendationConfig:
  ecsMemoryThreshold: 256
  workloadMemoryThreshold: 256
  ecsCpuThreshold: 0.25
  workloadCpuThreshold: 0.25
  minimumThresholdEnabled: false
health:
  server:
    port: 8087
config:
  DEPLOY_MODE: '{{ .Values.global.deployMode }}'
  MEMORY: '{{ .Values.java.memory }}'
  NAMESPACE: '{{ .Release.Namespace }}'
  REPLICA: '{{ .Values.replicaCount }}'
  ISOLATED_REPLICA: '{{ .Values.isolatedReplica }}'
  MONGO_INDEX_MANAGER_MODE: AUTO
  EVEMTS_MONGO_INDEX_MANAGER_MODE: AUTO
  SEGMENT_ENABLED: "false"
  ANOMALY_DETECTION_USE_PROPHET: "true"
  BANZAI_CONFIG_PORT: "8082"
  METRICS_COLLECTION_DISABLED: "true"
  CONNECTOR_HEALTH_UPDATE_CRON: 0 0 10,22 * * ?
  DELEGATE_HEALTH_UPDATE_CRON: 0 0 10,22 * * ?
  GCP_USE_NEW_PIPELINE: "true"
  AWS_USE_NEW_PIPELINE: "true"
  GCP_SYNC_ENABLED: "true"
  CONNECTOR_HEALTH_UPDATE_JOB_ENABLED: "true"
  DELEGATE_HEALTH_UPDATE_JOB_ENABLED: "true"
  GCP_BQ_UPDATE_BATCH_ENABLED: "false"
  INTERNAL_MANAGER_TARGET: harness-manager:9879
  INTERNAL_MANAGER_AUTHORITY: harness-manager:9879
  S3_SYNC_CONFIG_BUCKET_NAME: '{{ .Values.cloudProviderConfig.S3_SYNC_CONFIG_BUCKET_NAME }}'
  S3_SYNC_CONFIG_REGION: '{{ .Values.cloudProviderConfig.S3_SYNC_CONFIG_REGION }}'
  AWS_S3_SYNC_TIMEOUT_MINUTES: '{{ .Values.cloudProviderConfig.AWS_S3_SYNC_TIMEOUT_MINUTES }}'
  UI_SERVER_URL: '{{.Values.global.loadbalancerURL}}'
  ANOMALY_DETECTION_PYTHON_SERVICE_URL: "http://anomaly-detection.{{ .Release.Namespace }}.svc.cluster.local:8081"
  BANZAI_CONFIG_HOST: "http://cloud-info.{{ .Release.Namespace }}.svc.cluster.local"
  BANZAI_RECOMMENDER_BASEURL: "http://telescopes.{{ .Release.Namespace }}.svc.cluster.local:9090/"
  MANAGER_CLIENT_BASEURL: "http://harness-manager.{{ .Release.Namespace }}.svc.cluster.local:9090/api/"
  NG_MANAGER_SERVICE_HTTP_CLIENT_CONFIG_BASE_URL: "http://ng-manager.{{ .Release.Namespace }}.svc.cluster.local:7090/"
  CE_NG_SERVICE_HTTP_CLIENT_CONFIG_BASE_URL: "http://nextgen-ce.{{ .Release.Namespace }}.svc.cluster.local:6340/ccm/api/"
  GCP_PROJECT_ID: '{{ .Values.global.ccm.gcpProjectId }}'
  CLUSTER_DATA_GCS_BUCKET: '{{ .Values.cloudProviderConfig.CLUSTER_DATA_GCS_BUCKET }}'
  CLUSTER_DATA_GCS_BACKUP_BUCKET: '{{ .Values.cloudProviderConfig.CLUSTER_DATA_GCS_BACKUP_BUCKET }}'
  HARNESS_CE_AZURE_CONTAINER_NAME: '{{ .Values.azureConfig.HARNESS_CE_AZURE_CONTAINER_NAME }}'
  HARNESS_CE_AZURE_STORAGE_NAME: '{{ .Values.azureConfig.HARNESS_CE_AZURE_STORAGE_NAME }}'
  HARNESS_CE_AZURE_IS_SYNC_JOB_DISABLED: '{{ .Values.azureConfig.HARNESS_CE_AZURE_IS_SYNC_JOB_DISABLED }}'
  DATA_PIPELINE_CONFIG_GCP_PROJECT_ID: '{{ .Values.global.ccm.gcpProjectId }}'
  DATA_PIPELINE_CONFIG_GCS_BASE_PATH: '{{ .Values.cloudProviderConfig.DATA_PIPELINE_CONFIG_GCS_BASE_PATH }}'
  STACK_DRIVER_LOGGING_ENABLED: '{{ .Values.global.stackDriverLoggingEnabled }}'
  CLICKHOUSE_ENABLED: '{{ .Values.global.database.clickhouse.enabled }}'
  DKRON_CLIENT_BASEURL: "http://dkron:8080"
  GOVERNANCE_RECOMMENDATION_JOB_ENABLED: '{{ .Values.governance.awsRecommendationJobEnabled }}'
  GOVERNANCE_RECOMMENDATION_JOB_ENABLED_AZURE: '{{ .Values.governance.azureRecommendationJobEnabled }}'
  GOVERNANCE_RECOMMENDATION_JOB_ENABLED_GCP: '{{ .Values.governance.gcpRecommendationJobEnabled }}'
  GOVERNANCE_BQ_LOAD_JOB_CONFIG_ENABLED: '{{ .Values.governance.bqLoadJobConfigEnabled }}'
  GOVERNANCE_ENFORCEMENT_RECOMMENDATION_ENABLED: '{{ .Values.governance.enforcementRecommendationEnabled }}'
  GOVERNANCE_ENFORCEMENT_RECOMMENDATION_MIN_COST: '{{ .Values.governance.enforcementMinCost }}'
  GOVERNANCE_RECOMMENDATION_JOB_CRON: '{{ .Values.governance.awsRecommendationJobCron }}'
  GOVERNANCE_RECOMMENDATION_JOB_CRON_AZURE: '{{ .Values.governance.azureRecommendationJobCron }}'
  GOVERNANCE_RECOMMENDATION_JOB_CRON_GCP: '{{ .Values.governance.gcpRecommendationJobCron }}'
  GOVERNANCE_ENFORCEMENT_RECOMMENDATION_JOB_AWS: '{{ .Values.governance.awsEnforcementRecommendationJobCron }}'
  GOVERNANCE_ENFORCEMENT_RECOMMENDATION_JOB_AZURE: '{{ .Values.governance.azureEnforcementRecommendationJobCron }}'
  GOVERNANCE_ENFORCEMENT_RECOMMENDATION_JOB_GCP: '{{ .Values.governance.gcpEnforcementRecommendationJobCron }}'
  GOVERNANCE_CALLBACK_API_ENDPOINT: "http://nextgen-ce.{{ .Release.Namespace }}.svc.cluster.local:6340/ccm/api/governance/enqueueInternal"
  GOVERNANCE_OOTB_ACCOUNT: '{{ .Values.governance.ootbAccount }}'
  GOVERNANCE_RECOMMENDATION_MIN_COST_LIMIT: '{{ .Values.governance.governanceRecommendationMinCostForMonth }}'
  GOVERNANCE_RECOMMENDATION_ACCOUNT_REGION_LIMIT: '{{ .Values.governance.governanceRecommendationAccountAndRegionLimit }}'
  GOVERNANCE_RECOMMENDATION_HEALTH_UPDATE_AWS_CRON: '{{ .Values.governance.governanceRecommendationHealthUpdateAwsCron }}'
  GOVERNANCE_RECOMMENDATION_HEALTH_UPDATE_AZURE_CRON: '{{ .Values.governance.governanceRecommendationHealthUpdateAzureCron }}'
  GOVERNANCE_RECOMMENDATION_HEALTH_UPDATE_GCP_CRON: '{{ .Values.governance.governanceRecommendationHealthUpdateGcpCron }}'
  GOVERNANCE_MIN_COST_PER_RECOMMENDATION_LIMIT: '{{ .Values.governance.governanceMinCostPerRecommendationLimit }}'
  GOVERNANCE_RECOMMENDATION_HEALTH_UPDATE_ENABLED_AWS: '{{ .Values.governance.governanceRecommendationHealthUpdateEnabledAws }}'
  GOVERNANCE_RECOMMENDATION_HEALTH_UPDATE_ENABLED_AZURE: '{{ .Values.governance.governanceRecommendationHealthUpdateEnabledAzure }}'
  GOVERNANCE_RECOMMENDATION_HEALTH_UPDATE_ENABLED_GCP: '{{ .Values.governance.governanceRecommendationHealthUpdateEnabledGcp }}'
  ECS_MEMORY_THRESHOLD: '{{ .Values.recommendationConfig.ecsMemoryThreshold }}'
  ECS_CPU_THRESHOLD: '{{ .Values.recommendationConfig.ecsCpuThreshold }}'
  WORKLOAD_MEMORY_THRESHOLD: '{{ .Values.recommendationConfig.workloadMemoryThreshold }}'
  WORKLOAD_CPU_THRESHOLD: '{{ .Values.recommendationConfig.workloadCpuThreshold }}'
  MINIMUM_THRESHOLD_ENABLED: '{{ .Values.recommendationConfig.minimumThresholdEnabled }}'
  USE_WORKLOAD_IDENTITY: '{{ .Values.workloadIdentity.enabled }}'
  AWS_ACCOUNT_TAGS_COLLECTION_JOB_ENABLED: '{{ .Values.awsAccountTagsCollectionJobConfig.enabled }}'
  GCP_SYNC_PYTHON_IMAGE_PATH: '{{ include "common.images.image" (dict "imageRoot" .Values.imageGCPDataPipeline "global" .Values.global) }}'
  BUCKET_NAME_PREFIX: '{{ .Values.gcpConfig.bucketNamePrefix }}'
  GCP_SMP_ENABLED: '{{ .Values.gcpConfig.GCP_SMP_ENABLED }}'
  GCP_FRESH_SYNC_INTERVAL_DAYS: '{{ .Values.gcpSyncSmpConfig.gcpFreshSyncIntervalInDays }}'
  GCP_BILLING_SYNC_INTERVAL_DAYS: '{{ .Values.gcpSyncSmpConfig.gcpBillingSyncIntervalInDays }}'
  FEATURE_FLAG_SYSTEM: "LOCAL"
  ACCESS_CONTROL_BASE_URL: "http://access-control.{{ .Release.Namespace }}.svc.cluster.local:9006/api/"
  ACCESS_CONTROL_ENABLED: "true"
  HEALTH_SERVER_PORT: '{{ .Values.health.server.port }}'
  LIVENESS_PROBE_ENABLED: '{{ .Values.livenessProbe.enabled }}'
  LIVENESS_PROBE_PATH: '{{ .Values.livenessProbe.path }}'
  LIVENESS_PROBE_INIT_DELAY: '{{ .Values.livenessProbe.initialDelaySeconds }}'
  LIVENESS_PROBE_PERIOD: '{{ .Values.livenessProbe.periodSeconds }}'
  LIVENESS_PROBE_TIMEOUT: '{{ .Values.livenessProbe.timeoutSeconds }}'
  LIVENESS_PROBE_FAILURE_THRESHOLD: '{{ .Values.livenessProbe.failureThreshold }}'
  BATCH_JOB_METADATA_CLEANUP_SCHEDULE: '{{ .Values.batchJobRepository.metadataCleanupSchedule }}'
  BATCH_JOB_METADATA_RETENTION_PERIOD: '{{ .Values.batchJobRepository.dataRetentionPeriodInDays }}'
  GCP_CLOUD_FUNCTION_REGION: "us-central1"
  GCP_CLOUD_FUNCTION_NAME: "ce-gcp-billing-bq-terraform"
  REDISSON_PING_CONNECTION_INTERVAL_IN_MILLIS: "0"
rbac:
  rules: []
pdb:
  create: false
