# Default values for pipeline-service
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  autoscaling:
    enabled: false
  pdb:
    create: false
  jfr:
    enabled: false
  monitoring:
    enabled: false
    managedPlatform: ""
  kubeVersion: ""
  commonAnnotations: {}
  commonLabels: {}
  loadbalancerURL: "https://test.com"
  stackDriverLoggingEnabled: false
  ssca:
    enabled: false
  database:
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts:
        - dummy.net
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      sslEnabled: false
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      certKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              TIMESCALEDB_USERNAME: ""
              TIMESCALEDB_PASSWORD: ""
              TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts: []
      secretName: "redis-secret"
      userKey: "redis-user"
      passwordKey: "redis-password"
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
    elasticsearch:
      installed: true
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              ELASTIC_SEARCH_API_KEY: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                ELASTIC_SEARCH_API_KEY:
                  name: ""
                  property: ""
  imagePullSecrets: []
  ingress:
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: false
      secretName: ''
    # -- add annotations to ingress objects
    objects:
      annotations: {}
    disableHostInIngress: false
    pathPrefix: ""
    pathType: ""
  istio:
    # -- create virtualServices objects
    enabled: false
    enableRegexRoutes: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      pathPrefix: ""
      gateways:
      hosts:
  opa:
    enabled: false
  waitForInitContainer:
    enabled: true
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: "sha256:b8cb03089a08ff78bd59f9bdb29c9a0987517314e6f2245640d242345b9428dd"
      imagePullSecrets: []
  fileLogging:
    enabled: false
    logFilename: /opt/harness/logs/pod.log
    maxFileSize: 50MB
    maxBackupFileCount: 10
    totalFileSizeCap: 1GB
monitoring:
  port: 8889
  path: /metrics
terminationMessage: {}
secondaryTimescaledb:
  # -- TimescaleDB host names
  hosts: []
  protocol: "jdbc:postgresql2312321"
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
database:
  mongo:
    pmsharness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    notifications:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
  redis:
    events:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
    cache:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secretName: ""
      userKey: ""
      passwordKey: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
    lock:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secretName: ""
      userKey: ""
      passwordKey: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
replicaCount: 1
updateStrategy:
  rollingUpdate:
    maxSurge: 100%
    maxUnavailable: 0
  type: RollingUpdate
progressDeadlineSeconds: 600
allowedOrigins: ""
image:
  registry: docker.io
  digest: "sha256:129cb60fdb45900105f7fee401e95eb8a9aba0ad123ca971cae690699869d932"
  repository: harness/pipeline-service-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.123.2"
  imagePullSecrets: []
mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password
timescaleSecret:
  password:
    name: harness-secrets
    key: timescaledbPostgresPassword
java:
  memory: "4096m"
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-default"
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext:
  runAsUser: 65534
  runAsNonRoot: true
probes:
  livenessProbe:
    httpGet:
      path: /api/health/liveness
      port: http-pms
      scheme: HTTP
    timeoutSeconds: 10
    periodSeconds: 60
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    httpGet:
      path: /api/health
      port: http-pms
      scheme: HTTP
    timeoutSeconds: 1
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 10
  startupProbe:
    httpGet:
      path: /api/health
      port: http-pms
      scheme: HTTP
    initialDelaySeconds: 60
    timeoutSeconds: 1
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 30
service:
  annotations: {}
  type: ClusterIP
  protocol: TCP
  port: 12001
  grpcport: 12011
  gitsyncgrpcport: 14002
  pmssdkgrpcport: 15302
resources:
  limits:
    memory: 6144Mi
  requests:
    cpu: 1
    memory: 6144Mi
autoscaling:
  enabled: false
  targetMemory: ""
  targetCPU: 70
nodeSelector: {}
tolerations: []
affinity: {}
imagePullSecrets: {}
additionalConfigs: {}
java17flags: ""
# extraVolumes:
# - name: volume-test
#   configMap:
#     name: test-config
#     readOnly: true
extraVolumes: []
# extraVolumeMounts:
#   - name: test-volume-mount
#     mountPath: /opt/harness/config
extraVolumeMounts: []
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# extraEnvVars:
# - name: POD_NAME
#   valueFrom:
#     fieldRef:
#       fieldPath: metadata.name
extraEnvVars: []
virtualService:
  annotations: {}
  objects:
    - name: pipeline-service
      pathMatchType: prefix
      pathRewrite: "/"
      paths:
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/pipeline/'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/pipeline'
    - name: pipeline-service-v1-apis
      pathMatchType: regex
      pathRewrite: "/api/\\1"
      paths:
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines.*)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/input-sets.*)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/pipeline-schema.*)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/execute/stages-execution-list)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/execute/stages)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/execute/dynamic)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/execute)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/step-pallete)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/triggers/catalog)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/approvals/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/triggers)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/triggers/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/execution/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/execute/.+/retry-stages)'
ingress:
  objects:
    - name: pipeline-service
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
        nginx.ingress.kubernetes.io/use-regex: "true"
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/pipeline(/|$)(.*)'
    - name: pipeline-service-v1-apis
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /api/$1
        nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
        nginx.ingress.kubernetes.io/use-regex: "true"
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines.*)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/input-sets.*)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/pipeline-schema.*)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/execute/stages-execution-list)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/execute/stages)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/execute/dynamic)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/execute)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/step-pallete)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/triggers/catalog)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/approvals/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/triggers)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/triggers/.+)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/execution/.+)'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/(v1/orgs/.+/projects/.+/pipelines/.+/execute/.+/retry-stages)'
secrets:
  fileSecret: []
  default:
    OPA_SERVER_SECRET: "dOkdsVqdRPPRJG31XU0qY4MPqmBBMk0PTAGIKM6O7TGqhjyxScIdJe80mwh5Yb5zF3KxYBHw6B3Lfzlq"
    CF_CLIENT_API_KEY: ""
    LOG_STREAMING_SERVICE_TOKEN: "c76e567a-b341-404d-a8dd-d9738714eb82"
  kubernetesSecrets:
    - secretName: ""
      keys:
        OPA_SERVER_SECRET: ""
        CF_CLIENT_API_KEY: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          OPA_SERVER_SECRET:
            name: ""
            property: ""
          CF_CLIENT_API_KEY:
            name: ""
            property: ""
config:
  EVENTS_FRAMEWORK_NETTY_THREADS: "64"
  EVENTS_FRAMEWORK_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  EVENTS_FRAMEWORK_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME: harness-redis
  EVENTS_FRAMEWORK_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  CACHE_BACKEND: REDIS
  CACHE_CONFIG_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache") }}'
  CACHE_CONFIG_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache") }}'
  CACHE_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  CACHE_CONFIG_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  CACHE_NAMESPACE: ""
  LOCK_CONFIG_ENV_NAMESPACE: ""
  LOCK_CONFIG_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "lock") }}'
  LOCK_CONFIG_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "lock") }}'
  LOCK_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  LOCK_CONFIG_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  REDIS_RETRY_ATTEMPTS: "5"
  REDIS_RETRY_INTERVAL: "2500"
  REDIS_SUBSCRIPTIONS_PER_CONNECTION: "10"
  REDISSON_PING_CONNECTION_INTERVAL_IN_MILLIS: "0"
  ACCESS_CONTROL_BASE_URL: http://access-control:9006/api/
  ACCESS_CONTROL_ENABLED: "true"
  AUDIT_SERVICE_BASE_URL: http://platform-service:9005/api/
  AUTH_ENABLED: "true"
  BASE_PATH_PREFIX: "/gateway/pipeline/api"
  CI_MANAGER_BASE_URL: http://ci-manager:7090/
  CUSTOM_TRIGGER_BASEURL: "{{ .Values.global.loadbalancerURL }}/gateway/pipeline/api/"
  CV_MANAGER_BASE_URL: http://cv-nextgen:6060/cv/api/
  DEBEZIUM_CONSUMER_BATCH_SIZE: "100"
  DEBEZIUM_CONSUMER_THREADS: "2"
  DEBEZIUM_CONSUMER_TOPIC_NAME: "DEBEZIUM_pms-harness.pms-harness.planExecutionsSummary"
  DEPLOY_MODE: KUBERNETES_ONPREM
  DISABLE_CUSTOM_STAGE_IN_PIPELINE_SERVICE: "true"
  DISABLE_FREEZE_NOTIFY_TEMPLATE: "false"
  DISTRIBUTED_LOCK_IMPLEMENTATION: "REDIS"
  ENABLE_APPDYNAMICS: "false"
  ENABLE_AUDIT: "true"
  ENABLE_COVERAGE: "false"
  ENABLE_DASHBOARD_TIMESCALE: "true"
  ENABLE_ERROR_TRACKING: "false"
  ENABLE_GIT_SYNC: "true"
  ENABLE_OPENTELEMETRY: "false"
  ENFORCEMENT_CHECK_ENABLED: "true"
  ENV: "SMP"
  FEATURE_FLAG_SYSTEM: LOCAL
  FF_SERVER_BASE_URL: 'http://ff-admin-server.{{ .Release.Namespace }}.svc.cluster.local/api/1.0'
  FILTER_CREATOR_MERGE_SERVICE_EXECUTOR_POOL_CORE_SIZE: "5"
  FILTER_CREATOR_MERGE_SERVICE_EXECUTOR_POOL_MAX_SIZE: "5"
  GRPC_SERVER_PORT: "12011"
  HARNESS_CODE_GIT_BASE_URL: '{{ .Values.global.loadbalancerURL }}/code/git'
  HARNESS_CODE_INTERNAL_API_URL: http://code-api:80/
  IACM_MANAGER_BASE_URL: http://iacm-manager:7090/
  INTERNAL_CI_MANAGER_AUTHORITY: '{{ ternary "ci-manager:9979" "dns:///ci-manager-headless:9979" .Values.global.istio.enabled }}'
  INTERNAL_CI_MANAGER_TARGET: '{{ ternary "ci-manager:9979" "dns:///ci-manager-headless:9979" .Values.global.istio.enabled }}'
  INTERNAL_PIPELINE_SERVICE_AUTHORITY: '{{ ternary "pipeline-service:15302" "dns:///pipeline-service-headless:15302" .Values.global.istio.enabled }}'
  INTERNAL_PIPELINE_SERVICE_TARGET: '{{ ternary "pipeline-service:15302" "dns:///pipeline-service-headless:15302" .Values.global.istio.enabled }}'
  INTERNAL_MANAGER_AUTHORITY: '{{ ternary "harness-manager:9879" "dns:///harness-manager-headless:9879" .Values.global.istio.enabled }}'
  INTERNAL_MANAGER_TARGET: '{{ ternary "harness-manager:9879" "dns:///harness-manager-headless:9879" .Values.global.istio.enabled }}'
  INTERNAL_NG_MANAGER_AUTHORITY: '{{ ternary "ng-manager:9979" "dns:///ng-manager-headless:9979" .Values.global.istio.enabled }}'
  INTERNAL_NG_MANAGER_GITSYNC_AUTHORITY: '{{ ternary "ng-manager:13002" "dns:///ng-manager-headless:13002" .Values.global.istio.enabled }}'
  INTERNAL_NG_MANAGER_GITSYNC_TARGET: '{{ ternary "ng-manager:13002" "dns:///ng-manager-headless:13002" .Values.global.istio.enabled }}'
  INTERNAL_NG_MANAGER_TARGET: '{{ ternary "ng-manager:9979" "dns:///ng-manager-headless:9979" .Values.global.istio.enabled }}'
  INTERNAL_CVNG_MANAGER_AUTHORITY: cv-nextgen:9979
  INTERNAL_CVNG_MANAGER_TARGET: cv-nextgen:9979
  INTERNAL_IACM_MANAGER_AUTHORITY: iacm-manager:9979
  INTERNAL_IACM_MANAGER_TARGET: iacm-manager:9979
  INTERNAL_IDP_SERVICE_AUTHORITY: idp-service:9979
  INTERNAL_IDP_SERVICE_TARGET: idp-service:9979
  INTERNAL_STO_MANAGER_AUTHORITY: sto-manager:9979
  INTERNAL_STO_MANAGER_TARGET: sto-manager:9979
  INTERRUPT_MONITOR_ITERATOR_THREAD_POOL_SIZE: "2"
  JAVA_ADVANCED_FLAGS: '{{- include "harnesscommon.jfr.v1.printJavaAdvancedFlags" (dict "ctx" $) }}'
  LOGGING_LEVEL: INFO
  LOG_STREAMING_CONTAINER_STEP_BASE_URL: '{{ .Values.global.loadbalancerURL }}/log-service/'
  LOG_STREAMING_SERVICE_BASEURL: 'http://log-service.{{ .Release.Namespace }}.svc.cluster.local:8079/'
  MANAGER_BASE_URL: http://harness-manager:9090/api/
  MANAGER_CLIENT_BASEURL: http://harness-manager:9090/api/
  MEMORY: '{{ .Values.java.memory }}'
  MONGO_INDEX_MANAGER_MODE: AUTO
  MONGO_MESSAGE_BROKER_URI: ""
  MONGO_TRANSACTIONS_ALLOWED: "false"
  NG_MANAGER_BASE_URL: http://ng-manager:7090/
  NOTIFICATION_BASE_URL: http://platform-service:9005/api/
  OPA_CONNECT_TIMEOUT: "40"
  OPA_READ_TIMEOUT: "40"
  OPA_SERVER_BASEURL: 'http://policy-mgmt:3000/'
  ORCHESTRATION_LOG_SHOULD_USE_BATCHING: "true"
  ORCHESTRATION_VISUALIZATION_POOL_CORE_SIZE: "10"
  ORCHESTRATION_VISUALIZATION_POOL_MAX_SIZE: "50"
  OTEL_EXPORTER_OTLP_ENDPOINT: ""
  OTEL_SERVICE_NAME: pipeline-service
  PIPELINE_SERVICE_BASE_URL: '{{ .Values.global.loadbalancerURL }}/ng/#'
  PIPELINE_SERVICE_ENDPOINT: http://pipeline-service:12001/api/
  PLAN_CREATOR_DEPENDENCY_BATCH: "10"
  PLAN_CREATOR_MERGE_SERVICE_EXECUTOR_POOL_CORE_SIZE: "20"
  PLAN_CREATOR_MERGE_SERVICE_EXECUTOR_POOL_MAX_SIZE: "100"
  PLAN_CREATOR_SERVICE_EXECUTOR_POOL_CORE_SIZE: "20"
  PLAN_CREATOR_SERVICE_EXECUTOR_POOL_MAX_SIZE: "100"
  PMS_API_BASE_URL: '{{ .Values.global.loadbalancerURL }}/gateway/pipeline/api/'
  PMS_WEBHOOK_EVENT_CONSUMER_THREAD_COUNT: "15"
  PUBLISH_ADVISER_EVENT_FOR_CUSTOM_ADVISERS: "true"
  REDUCE_ORCHESTRATION_EVENT_LOG: "true"
  RESOURCE_GROUP_BASE_URL: 'http://platform-service:9005/api/'
  SCM_SERVICE_URI: scm-service:8091
  SEGMENT_ENABLED: "false"
  SHOULD_CONFIGURE_WITH_CI: "true"
  STACK_DRIVER_LOGGING_ENABLED: '{{ .Values.global.stackDriverLoggingEnabled }}'
  STO_MANAGER_BASE_URL: http://sto-manager:7090/
  TEMPLATE_SERVICE_ENDPOINT: http://template-service:15002/api/
  VARIABLE_CREATOR_MERGE_SERVICE_EXECUTOR_POOL_CORE_SIZE: "5"
  VARIABLE_CREATOR_MERGE_SERVICE_EXECUTOR_POOL_MAX_SIZE: "5"
  VERSION: '{{ .Values.image.tag }}'
  WEBHOOK_TRIGGER_BASEURL: '{{ .Values.global.loadbalancerURL }}/ng/api/'
  SDK_RESPONSE_EVENT_CONSUMER_THREAD_COUNT: "2"
  NODE_START_EVENT_CONSUMER_THREAD_COUNT: "2"
  RESUME_EVENT_CONSUMER_THREAD_COUNT: "2"
  INITIATE_NODE_EVENT_CONSUMER_THREAD_COUNT: "2"
  ORCHESTRATION_POOL_MAX_SIZE: "300"
  SDK_RESPONSE_EVENT_POOL_MAX_SIZE: "300"
  GRPC_MAX_CONNECTION_AGE: "30"
  # will be change with harness common
  ELASTIC_SEARCH_URL: elastic-search:9200
  PIPELINE_SDK_RESPONSE_EVENT_MAX_TOPIC_SIZE: "10000"
  PIPELINE_SDK_RESPONSE_SPAWN_EVENT_MAX_TOPIC_SIZE: "10000"
  PIPELINE_SDK_STEP_RESPONSE_EVENT_MAX_TOPIC_SIZE: "10000"
  ENABLE_MIGRATION_JOB_FOR_GCS: "false"
  MIGRATION_JOB_BATCH_SIZE_FOR_GCS: "1000"
  GCS_MIGRATION_JOB_FREQUENCY_MINUTES: "60"
rbac:
  rules: []
jfr:
  image:
    registry: registry.access.redhat.com
    repository: ubi8/ubi-minimal
    pullPolicy: Always
    tag: "8.9-1029"
    digest: "sha256:87bcbfedfd70e67aab3875fff103bade460aeff510033ebb36b7efa009ab6639"
    imagePullSecrets: []
pdb:
  create: false
