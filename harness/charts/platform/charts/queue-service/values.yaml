# Default values for queue-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  autoscaling:
    enabled: false
  pdb:
    create: false
  commonLabels: {}
  commonAnnotations: {}
  kubeVersion: ""
  loadbalancerURL: ""
  ha: true
  stackDriverLoggingEnabled: false
  database:
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  monitoring:
    enabled: false
    managedPlatform: ""
  ingress:
    disableHostInIngress: false
    pathPrefix: ""
    pathType: ""
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ''
    # -- add annotations to ingress objects
    objects:
      annotations: {}
  istio:
    # -- create virtualServices objects
    enabled: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      gateways:
      hosts:
  imagePullSecrets: []
  # -- Wait-For-App initContainers details
  waitForInitContainer:
    ## image version
    ## ref: https://hub.docker.com/r/harness/helm-init-container/tags
    # --image.registry ; image registry
    # --image.repository ; image repository
    # --image.tag ; image tag (immutable tags are recommended)
    # --image.digest ; image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    # --image.pullPolicy Image pull policy
    # --image.imagePullSecrets Specify docker-registry secret names as an array
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: "sha256:b8cb03089a08ff78bd59f9bdb29c9a0987517314e6f2245640d242345b9428dd"
      imagePullSecrets: []
    resources:
      limits:
        memory: 128Mi
      requests:
        cpu: 128m
        memory: 128Mi
    containerSecurityContext:
      runAsUser: 65534
      runAsNonRoot: true
    enabled: true
  fileLogging:
    enabled: false
    logFilename: /opt/harness/logs/pod.log
    maxFileSize: 50MB
    maxBackupFileCount: 10
    totalFileSizeCap: 1GB
monitoring:
  port: 9091
  path: /metrics
progressDeadlineSeconds: 300
terminationGracePeriodSeconds: 30
replicaCount: 1
updateStrategy:
  rollingUpdate:
    maxSurge: 100%
    maxUnavailable: 0
probes:
  startupProbe:
    failureThreshold: 10
    httpGet:
      path: /v1/healthz
      port: 9091
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 10
    httpGet:
      path: /v1/healthz
      port: 9091
      scheme: HTTP
    periodSeconds: 5
    timeoutSeconds: 5
  livenessProbe:
    failureThreshold: 10
    httpGet:
      path: /v1/healthz
      port: 9091
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 10
terminationMessage: {}
database:
  redis:
    hsqs:
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
image:
  repository: harness/queue-service-signed
  pullPolicy: IfNotPresent
  registry: docker.io
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.7.1"
  imagePullSecrets: []
  digest: "sha256:88af1e29dd8fd93f098bac142afaa0f7fcf5ef2f2d30f1456f770370f6933672"
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podLabels: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 9091
  targetPort: 9091
ingress:
  objects:
    - annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/queue-service(/|$)(.*)'
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
resources:
  limits:
    memory: 250M
  requests:
    cpu: 100m
    memory: 250M
autoscaling:
  enabled: false
  targetMemory: ""
  targetCPU: 80
# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}
tolerations: []
affinity: {}
lifecycleHooks: {}
config:
  HSQS_REDIS_ENDPOINT: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "hsqs" "unsetProtocol" true) }}'
  HSQS_HOST: ""
  HSQS_DEBUG: "false"
  HSQS_DISABLE_AUTH: "false"
  HSQS_ENABLE_PROFILER: "false"
  HSQS_PORT: "9091"
  HSQS_REDIS_SENTINEL_ENABLED: '{{ .Values.global.database.redis.installed }}'
secrets:
  fileSecret: []
  default:
    JWT_SECRET: "UeWgUReGXlbrB0zkDCBFz1EDfU1zrXbhAbGfQ8jsSCaA881SYFMlHqnn3OQnAKAU6hTQ5NniwuMeKSFW"
  kubernetesSecrets:
    - secretName: ""
      keys:
        JWT_SECRET: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          JWT_SECRET:
            name: ""
            property: ""
rbac:
  rules: []
virtualService:
  annotations: {}
  objects:
    - pathMatchType: prefix
      pathRewrite: "/"
      paths:
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/queue-service/'
pdb:
  create: false
