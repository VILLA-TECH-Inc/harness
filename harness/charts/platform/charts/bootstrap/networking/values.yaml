global:
  globalIngress:
    enabled: false
    className: "harness-global"
    hosts:
      - 'myhost.example.com'
    tls:
      enabled: true
      secretName: harness-cert
  commonAnnotations: {}
  commonLabels: {}
  ingress:
    enabled: false
    className: "harness"
    hosts:
      - 'myhost.example.com'
    tls:
      enabled: true
      secretName: harness-cert
  # -- Istio Ingress Settings
  istio:
    enabled: false
    strict: false
    gateway:
      # -- Enable to create istio-system gateway
      create: true
      port: 443
      # -- override the name of gateway
      name: ""
      # -- override the name of namespace to deploy gateway
      namespace: ""
      # -- adds a gateway selector
      selector:
        istio: ingressgateway
      protocol: HTTPS
    # -- set to istio gateway's k8s service FQDN for internal use case. eg "internal-istio-gateway.istio-system.svc.cluster.local"
    # If not set, internal request routing would happen via global.loadbalancerUrl
    istioGatewayServiceUrl: ""
    # -- add global.istio.istioGatewayServiceUrl in hosts if global.istio.istioGatewayServiceUrl is not empty.
    hosts:
      - '*'
    tls:
      credentialName:
      minProtocolVersion: TLSV1_2
      mode: SIMPLE
    virtualService:
      gateways:
        - ""
      # -- add global.istio.istioGatewayServiceUrl in hosts if global.istio.istioGatewayServiceUrl is not empty.
      hosts:
nginx:
  # -- Create Nginx Controller.  True will deploy a controller into your cluster
  create: false
  # -- Creates clusterIP
  clusterIPEnabled: false
  clusterRole:
    create: false
  clusterIP:
  # if clusterIP is disabled and this is set, it uses type:Loadbalancer, otherwise uses nodePort
  loadBalancerEnabled: false
  # set loadbalancer IP when loadBalancer service is enabled.
  loadBalancerIP:
  healthPort: ""
  healthNodePort: ""
  httpNodePort: ""
  httpsNodePort: ""
  className: ""
  controller:
    # -- annotations to be addded to ingress Controller
    annotations: {}
    watchNamespace: ""
    updateStatus: true
    httpPort: 8080
    httpsPort: 8443
    metrics:
      enabled: false
    watchIngressWithoutClass: true
    defaultSSLCertificate: ""
    configMap: ""
    defaultBackendService: ""
    publishService: ""
    electionId: ""
    args:
      - /nginx-ingress-controller
      - --ingress-class={{ default .Values.global.ingress.className .Values.nginx.controller.className }}
      - --default-backend-service={{ default "$(POD_NAMESPACE)/default-backend" .Values.nginx.controller.defaultBackendService }}
      - --watch-namespace={{ default "$(POD_NAMESPACE)" .Values.nginx.controller.watchNamespace }}
      - --update-status={{ .Values.nginx.controller.updateStatus }}
      - --configmap={{ default "$(POD_NAMESPACE)/harness-ingress-controller" .Values.nginx.controller.configMap }}
      - --http-port={{ .Values.nginx.controller.httpPort }}
      - --https-port={{ .Values.nginx.controller.httpsPort }}
      - --publish-service={{ default "$(POD_NAMESPACE)/harness-ingress-controller" .Values.nginx.controller.publishService }}
      - --election-id={{ default "ingress-controller-leader" .Values.nginx.controller.electionId }}
      - --default-ssl-certificate={{ default ( printf "$(POD_NAMESPACE)/%s" .Values.global.ingress.tls.secretName) .Values.nginx.controller.defaultSSLCertificate }}
    extraArgs: []
    controllerClass: ""
    config:
      proxy-body-size: 1024m
      proxy-read-timeout: "600"
      proxy-send-timeout: "600"
    progressDeadlineSeconds: 300
    livenessProbe:
      optional:
        initialDelaySeconds: 30
        timeoutSeconds: 5
  objects:
    # -- annotations to be added to ingress Objects
    annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  image:
    registry: registry.k8s.io
    repository: ingress-nginx/controller
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v1.11.2"
    digest: "sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce"
    imagePullSecrets: []
  resources:
    limits:
      memory: '512Mi'
    requests:
      cpu: '0.5'
      memory: '512Mi'
  podLabels: {}
  service:
    annotations: {}
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPU: ""
    targetMemory: ""
defaultbackend:
  # -- Create will deploy a default backend into your cluster
  create: false
  image:
    registry: registry.k8s.io
    repository: defaultbackend-amd64
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.5"
    digest: "sha256:4dc5e07c8ca4e23bddb3153737d7b8c556e5fb2f29c4558b7cd6e6df99c512c7"
    imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources:
    limits:
      memory: 20Mi
    requests:
      cpu: 10m
      memory: 20Mi
  podLabels: {}
  service:
    annotations: {}
  replicaCount: 1
