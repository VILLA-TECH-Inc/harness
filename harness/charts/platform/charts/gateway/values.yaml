# Default values for gateway
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  autoscaling:
    enabled: false
  pdb:
    create: false
  jfr:
    enabled: false
  kubeVersion: ""
  # -- URL of the public endpoint to access harness UI
  loadbalancerURL: "http://test/abc"
  commonAnnotations: {}
  commonLabels: {}
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - protocol to use for connection
      protocol: postgres
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - extra arguments set to connection string
      extraArgs: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
    redis:
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      secretName: "redis-secret"
      userKey: "redis-user"
      passwordKey: "redis-password"
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  ha: false
  imagePullSecrets: []
  globalIngress:
    enabled: false
    className: "harness-global"
    hosts:
      - 'myhost.example.com'
    tls:
      enabled: true
      secretName: harness-cert
  ingress:
    disableHostInIngress: false
    pathPrefix: ""
    pathType: ""
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ''
    # -- add annotations to ingress objects
    objects:
      annotations: {}
  istio:
    # -- create virtualServices objects
    enabled: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      gateways:
      hosts:
  waitForInitContainer:
    enabled: true
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: "sha256:b8cb03089a08ff78bd59f9bdb29c9a0987517314e6f2245640d242345b9428dd"
      imagePullSecrets: []
replicaCount: 1
maxSurge: 1
maxUnavailable: 0
progressDeadlineSeconds: 600
database:
  mongo:
    gateway:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
  redis:
    cache:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
image:
  registry: docker.io
  repository: harness/gateway-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.42.7"
  digest: "sha256:aa4aee6c04e01f8f233b02fad90a219a7a6b258268c5cf9bf6ea07b21b16a757"
  imagePullSecrets: []
mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password
java:
  memory: 512
  advancedFlags: '-Dreactor.netty.ioWorkerCount=1024'
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-default"
podAnnotations: {}
podLabels: {}
imagePullSecrets: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext:
  runAsUser: 65534
  runAsNonRoot: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
service:
  type: ClusterIP
  port: 8080
  annotations: {}
virtualService:
  annotations: {}
ingress:
  annotations: {}
  objects:
    - annotations:
        nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
        nginx.ingress.kubernetes.io/rewrite-target: /$1
        nginx.ingress.kubernetes.io/use-regex: "true"
      paths:
        - path: '/gateway/(.*)'
resources:
  limits:
    memory: 1024Mi
  requests:
    cpu: 0.5
    memory: 1024Mi
autoscaling:
  enabled: false
  targetCPU: ""
  targetMemory: ""
nodeSelector: {}
tolerations: []
affinity: {}
additionalConfigs: {}
secrets:
  default:
    LOG_SVC_GLOBAL_TOKEN: "c76e567a-b341-404d-a8dd-d9738714eb82"
    TI_SVC_GLOBAL_TOKEN: "78d16b66-4b4c-11eb-8377-acde48001122"
    JWT_ADMIN_PORTAL_SECRET: "nhUmut2NMcUnsR01OgOz0e51MZ51AqUwrOATJ3fJ"
    JWT_DATA_HANDLER_SECRET: "RdL7j9ZdCz6TVSHO7obJRS6ywYLJjH8tdfPP39i4MbevKjVodvjdhakdhashsh4371dasjldas"
  kubernetesSecrets:
    - secretName: ""
      keys:
        LOG_SVC_GLOBAL_TOKEN: ""
        TI_SVC_GLOBAL_TOKEN: ""
        JWT_ADMIN_PORTAL_SECRET: ""
        JWT_DATA_HANDLER_SECRET: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          LOG_SVC_GLOBAL_TOKEN:
            name: ""
            property: ""
          TI_SVC_GLOBAL_TOKEN:
            name: ""
            property: ""
          JWT_ADMIN_PORTAL_SECRET:
            name: ""
            property: ""
          JWT_DATA_HANDLER_SECRET:
            name: ""
            property: ""
# extraVolumes:
# - name: volume-test
#   configMap:
#     name: test-config
#     readOnly: true
extraVolumes: []
# extraVolumeMounts:
#   - name: test-volume-mount
#     mountPath: /opt/harness/config
extraVolumeMounts: []
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# extraEnvVars:
# - name: POD_NAME
#   valueFrom:
#     fieldRef:
#       fieldPath: metadata.name
extraEnvVars: []
config:
  DEPLOY_MODE: KUBERNETES_ONPREM
  API_VERSION: release-gateway:182
  CACHE_TYPE: REDIS
  TOKEN_CACHE_TTL: "300"
  SENTINEL_MASTER_NAME: harness-redis
  HARNESS_ENABLE_NG_AUTH_UI: "true"
  ENABLE_OAUTH_SIGNUP: "true"
  MANAGER_URL: '{{ include "gateway.managerUrl" . }}'
  MANAGER_PUBLIC_URL: '{{ (default .Values.loadbalancerURL .Values.global.loadbalancerURL) }}'
  MEMORY: '{{ .Values.java.memory }}'
  JAVA_ADVANCED_FLAGS: '{{ .Values.java.advancedFlags }}'
  USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  REDIS_PORT: '{{ include "harnesscommon.dbv3.redisPort" (dict "ctx" $ "database" "cache") }}'
  REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache" "unsetProtocol" true  "excludePort" true ) }}'
  REDIS_HOST: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache" "unsetProtocol" true "excludePort" true ) }}'
probes:
  livenessProbe:
    httpGet:
      path: /api/liveness
      port: gateway-port
      scheme: HTTP
    timeoutSeconds: 10
    periodSeconds: 60
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    httpGet:
      path: /actuator/health
      port: gateway-port
      scheme: HTTP
    timeoutSeconds: 1
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  startupProbe:
    httpGet:
      path: /actuator/health
      port: gateway-port
      scheme: HTTP
    initialDelaySeconds: 25
    timeoutSeconds: 1
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 32
pdb:
  create: false
rbac:
  rules: []
jfr:
  image:
    registry: registry.access.redhat.com
    repository: ubi8/ubi-minimal
    pullPolicy: Always
    tag: "8.9-1029"
    digest: "sha256:87bcbfedfd70e67aab3875fff103bade460aeff510033ebb36b7efa009ab6639"
    imagePullSecrets: []
