# Default values for ssca-manager.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  autoscaling:
    enabled: false
  pdb:
    create: false
  commonAnnotations: {}
  commonLabels: {}
  kubeVersion: ""
  loadbalancerURL: ""
  ha: true
  stackDriverLoggingEnabled: false
  database:
    elastic:
      installed: true
      protocol: elastic
      # --  provide default values if mongo.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              ELASTIC_USERNAME: ""
              ELASTIC_PASSWORD: ""
              ELASTIC_API_KEY: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                ELASTIC_USER:
                  name: ""
                  property: ""
                ELASTIC_PASSWORD:
                  name: ""
                  property: ""
                ELASTIC_API_KEY:
                  name: ""
                  property: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      secretName: "redis-secret"
      userKey: "redis-user"
      passwordKey: "redis-password"
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      # -- Enable TimescaleDB SSL
      sslEnabled: false
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              TIMESCALEDB_USERNAME: ""
              TIMESCALEDB_PASSWORD: ""
              TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
      certKey: ""
  monitoring:
    enabled: false
    port: 8889
    path: /metrics
  ingress:
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ''
    # -- add annotations to ingress objects
    disableHostInIngress: false
    pathPrefix: ""
    pathType: ""
    objects:
      annotations: {}
  istio:
    # -- create virtualServices objects
    enabled: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      gateways:
      hosts:
  imagePullSecrets: []
  jfr:
    enabled: false
  waitForInitContainer:
    ## image version
    ## ref: https://hub.docker.com/r/harness/helm-init-container/tags
    # --image.registry ; image registry
    # --image.repository ; image repository
    # --image.tag ; image tag (immutable tags are recommended)
    # --image.digest ; image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    # --image.pullPolicy Image pull policy
    # --image.imagePullSecrets Specify docker-registry secret names as an array
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: "sha256:c06cab15920d2f99a000f913316a76cd867c73fc8d7b2e68ba4851b39e64aa97"
      imagePullSecrets: []
    containerSecurityContext:
      runAsUser: 65534
      runAsNonRoot: true
    enabled: true
  fileLogging:
    enabled: false
    logFilename: /opt/harness/logs/pod.log
    maxFileSize: 50MB
    maxBackupFileCount: 10
    totalFileSizeCap: 1GB
replicaCount: 1
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
image:
  registry: docker.io
  repository: harness/ssca-manager-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.29.2"
  digest: "sha256:c1fab87e8cdde85e58cc3b6580524f312c48f133a9ee2b36888e1c7cf020835f"
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password
timescaleSecret:
  password:
    name: harness-secrets
    key: timescaledbPostgresPassword
timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext:
  runAsUser: 65534
  runAsNonRoot: true
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true

service:
  annotations: {}
  type: ClusterIP
  port: 8188
ingress:
  annotations: {}
  objects:
    - annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$2
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/ssca-manager(/|$)(.*)'
    - name: ssca-manager-v1-apis
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$1
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/org/.+/project/.+/sbom/process)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/org/.+/project/.+/sbom/enforcement)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/org/.+/project/.+/orchestration/.+/sbom-download)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/org/.+/project/.+/orchestration/.+/summary)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/org/.+/project/.+/enforcement/.+/summary)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/org/.+/project/.+/enforcement/.+/policy-violations)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/org/.+/project/.+/enforcement-result)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/org/.+/project/.+/enforcement-summary)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/org/.+/project/.+/normalised-sbom-component)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/remediations.*)'
        - path: '{{ .Values.global.ingress.pathPrefix }}/(v1/orgs/.+/projects/.+/exemptions.*)'
resources:
  limits:
    memory: 8192Mi
  requests:
    cpu: 1
    memory: 1024Mi
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
autoscaling:
  enabled: false
  targetCPU: ""
  targetMemory: ""
nodeSelector: {}
tolerations: []
affinity: {}
java:
  memory: 4096m
virtualService:
  annotations: {}
java17flags: ""
elastic:
  hosts: []
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          ELASTIC_USERNAME: ""
          ELASTIC_PASSWORD: ""
          ELASTIC_API_KEY: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            ELASTIC_USERNAME:
              name: ""
              property: ""
            ELASTIC_PASSWORD:
              name: ""
              property: ""
            ELASTIC_API_KEY:
              name: ""
              property: ""
database:
  mongo:
    ssca:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
  redis:
    events:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
    lock:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
    cache:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
jfr:
  image:
    registry: registry.access.redhat.com
    repository: ubi8/ubi-minimal
    pullPolicy: Always
    tag: "8.9-1029"
    digest: "sha256:87bcbfedfd70e67aab3875fff103bade460aeff510033ebb36b7efa009ab6639"
    imagePullSecrets: []
rbac:
  rules: []
deploymentProjectId: 'harness'
ssca:
  bucketName: "sbom-store"
# Preference order is ESO > K8sSecret.
# Hence, if S3 keys are mentioned in ESO, they would be picked or else we pick default from K8sSecrets minio.
secrets:
  default:
    POLICY_MGMT_SERVICE_SECRET: "dOkdsVqdRPPRJG31XU0qY4MPqmBBMk0PTAGIKM6O7TGqhjyxScIdJe80mwh5Yb5zF3KxYBHw6B3Lfzlq"
    ELASTIC_API_KEY: ""
  kubernetesSecrets:
    - secretName: ""
      keys:
        POLICY_MGMT_SERVICE_SECRET: ""
    - secretName: "minio"
      keys:
        S3_ACCESS_KEY_ID: "root-user"
        S3_ACCESS_SECRET_KEY: "root-password"
    - secretName: "harness-secrets"
      keys:
        STO_SERVICE_GLOBAL_TOKEN: "stoAppHarnessToken"
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          POLICY_MGMT_SERVICE_SECRET:
            name: ""
            property: ""
          S3_ACCESS_KEY_ID:
            name: ""
            property: ""
          S3_ACCESS_SECRET_KEY:
            name: ""
            property: ""
          ELASTIC_API_KEY:
            name: ""
            property: ""
config:
  SERVER_PORT: "8188"
  LOGGING_LEVEL: INFO
  MONGO_INDEX_MANAGER_MODE: AUTO
  DEPLOY_MODE: KUBERNETES_ONPREM
  CACHE_BACKEND: REDIS
  CACHE_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME: harness-redis
  LOCK_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  ACCESS_CONTROL_ENABLED: "true"
  JAVA_ADVANCED_FLAGS: '{{- include "harnesscommon.jfr.v1.printJavaAdvancedFlags" (dict "ctx" $) }}'
  NG_MANAGER_BASE_URL: 'http://ng-manager.{{ .Release.Namespace }}.svc.cluster.local:7090'
  MEMORY: '{{ .Values.java.memory }}'
  STACK_DRIVER_LOGGING_ENABLED: '{{ .Values.global.stackDriverLoggingEnabled }}'
  S3_BUCKET: '{{ .Values.ssca.bucketName }}'
  S3_ENDPOINT: 'http://minio.{{ .Release.Namespace }}.svc.cluster.local:9000'
  S3_REGION: 'US'
  PIPELINE_SERVICE_CLIENT_BASEURL: 'http://pipeline-service.{{ .Release.Namespace }}.svc.cluster.local:12001/api/'
  MANAGER_CLIENT_BASEURL: 'http://harness-manager.{{ .Release.Namespace }}.svc.cluster.local:9090/api/'
  POLICY_MGMT_SERVICE_BASEURL: 'http://policy-mgmt.{{ .Release.Namespace }}.svc.cluster.local:3000/'
  ACCESS_CONTROL_BASE_URL: 'http://access-control.{{ .Release.Namespace }}.svc.cluster.local:9006/api/'
  STO_SERVICE_BASEURL: 'http://sto-core.{{ .Release.Namespace }}.svc.cluster.local:4000/'
  STO_SERVICE_REST_CLIENT_BASEURL: 'http://sto-core.{{ .Release.Namespace }}.svc.cluster.local:4000/api/'
  AUDIT_CLIENT_BASEURL: 'http://platform-service.{{ .Release.Namespace }}.svc.cluster.local:9005/api/'
  ENABLE_AUDIT: 'true'
  ELASTIC_INDEX_NAME: '{{ .Values.deploymentProjectId }}-ssca'
  ENABLE_ELASTIC: 'false'
  ELASTIC_URL: '{{ include "harnesscommon.dbconnectionv2.elasticConnection" (dict "context" $) }}'
  USE_WORKLOAD_IDENTITY: 'false'
  PIPELINE_DEV_NAMESPACE: '{{ .Release.Namespace }}'
  EVENTS_FRAMEWORK_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  EVENTS_FRAMEWORK_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  EVENTS_FRAMEWORK_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  LOCK_CONFIG_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  LOCK_CONFIG_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "lock") }}'
  LOCK_CONFIG_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "lock") }}'
  CACHE_CONFIG_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache") }}'
  CACHE_CONFIG_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  CACHE_CONFIG_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache") }}'
  REDISSON_PING_CONNECTION_INTERVAL_IN_MILLIS: "0"
pdb:
  create: false
