# Default values for ssca-ui
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  autoscaling:
    enabled: false
  pdb:
    create: false
  kubeVersion: ""
  loadbalancerURL: ""
  imagePullSecrets: []
  cg:
    enabled: false
  commonLabels: {}
  commonAnnotations: {}
  ingress:
    disableHostInIngress: false
    pathPrefix: ""
    pathType: ""
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts: []
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ""
    # -- add annotations to ingress objects
    objects:
      annotations: {}
  istio:
    # -- create virtualServices objects
    enabled: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      gateways:
      hosts:
replicaCount: 1
maxSurge: 1
maxUnavailable: 0
virtualService:
  annotations: {}
  objects:
    - name: ssca-ui
      pathMatchType: prefix
      pathRewrite: "/"
      paths:
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/ssca/'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/ssca'
image:
  registry: docker.io
  repository: harness/ssca-ui-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 0.23.1
  digest: 'sha256:4dc5f745c3375b22054abeed791374e8b245a8fd0ac31efac4b45ef64b6c6855'
  # image pull secrets to use for ssca-ui image
  imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-default"
podAnnotations: {}
podLabels: {}
imagePullSecrets: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext:
  runAsUser: 65534
  runAsNonRoot: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
service:
  type: ClusterIP
  protocol: TCP
  port: 80
  targetport: 8080
  annotations: {}
ingress:
  objects:
    - annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
        nginx.ingress.kubernetes.io/use-regex: "true"
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/ssca(/|$)(.*)'
resources:
  limits:
    memory: '512Mi'
  requests:
    cpu: 1
    memory: '512Mi'
autoscaling:
  enabled: false
  targetCPU: ""
  targetMemory: ""
nodeSelector: {}
tolerations: []
affinity: {}
probes:
  readinessProbe:
    httpGet:
      path: /health
      port: ssca-ui-port
    periodSeconds: 10
    failureThreshold: 5
  livenessProbe:
    httpGet:
      path: /health
      port: ssca-ui-port
    periodSeconds: 10
    failureThreshold: 5
  startupProbe:
    httpGet:
      path: /health
      port: ssca-ui-port
    periodSeconds: 10
    failureThreshold: 30
additionalConfigs: {}
# extraVolumes:
# - name: volume-test
#   configMap:
#     name: test-config
#     readOnly: true
extraVolumes: []
# extraVolumeMounts:
#   - name: test-volume-mount
#     mountPath: /opt/harness/config
extraVolumeMounts: []
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

waitForInitContainer:
  image:
    registry: docker.io
    repository: harness/helm-init-container
    pullPolicy: IfNotPresent
    tag: "latest"
    digest: "sha256:c06cab15920d2f99a000f913316a76cd867c73fc8d7b2e68ba4851b39e64aa97"
    imagePullSecrets: []
env:
  config:
    ENABLE_CDN: "false"
rbac:
  rules: []
pdb:
  create: false
