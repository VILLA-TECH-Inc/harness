{{- if .Values.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "iac-server.name" . }}
  labels:
    {{- include "iac-server.labels" . | nindent 4 }}
    {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.global.commonAnnotations }}
  annotations: {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "iac-server.name" . }}
  minReplicas: {{ .Values.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.autoscaling.maxReplicas }}
  {{ if .Values.autoscaling.targetCPU }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{.Values.autoscaling.targetCPU}}
  {{ end }}
  {{ if .Values.autoscaling.targetMemory }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{.Values.autoscaling.targetMemory}}
  {{ end }}
  behavior:
    scaleDown:
      # don't scale down until 15min after load had dropped
      stabilizationWindowSeconds: 900
      # scale down pods at a rate of one pod per minute
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60
    scaleUp:
      # scale up based on last 2 minutes metrics
      # this is to allow startup spikes to not trigger scaling
      stabilizationWindowSeconds: 120
      # scale up pods at a rate of 4 pods per 5 seconds
      policies:
      - type: Pods
        value: 4
        periodSeconds: 5
      selectPolicy: Max
{{- end }}
