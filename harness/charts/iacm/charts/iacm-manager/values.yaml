# Default values for iacm-manager
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  pdb:
    enabled: false
  autoscaling:
    enabled: false
  commonAnnotations: {}
  commonLabels: {}
  loadbalancerURL: "https://test"
  monitoring:
    enabled: false
    managedPlatform: google
  waitForInitContainer:
    enabled: true
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: IfNotPresent
      tag: "latest"
      digest: "sha256:c06cab15920d2f99a000f913316a76cd867c73fc8d7b2e68ba4851b39e64aa97"
      imagePullSecrets: []
  delegate:
    airgapped: false
  imagePullSecrets: []
  istio:
    enabled: false
    gateway:
      create: true
      port: 443
      protocol: HTTPS
    hosts:
      - '*'
    strict: true
    tls:
      credentialName: ""
    virtualService:
      hosts:
        - ''
      gateways: []
  ingress:
    enabled: false
    objects:
      annotations: {}
    hosts:
      - 'my-host.example.org'
    tls:
      enabled: false
      secretName: harness-cert
  stackDriverLoggingEnabled: false
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - protocol to use for connection
      protocol: postgres
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - extra arguments set to connection string
      extraArgs: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts:
        - dummy.net
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      # -- Enable TimescaleDB SSL
      sslEnabled: false
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      certKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              TIMESCALEDB_USERNAME: ""
              TIMESCALEDB_PASSWORD: ""
              TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  opa:
    enabled: false
  jfr:
    enabled: false
# meta
nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
podLabels: {}
monitoring:
  path: /metrics
  port: 8889
# image
image:
  registry: docker.io
  repository: harness/iacm-manager-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 1.72.0
  digest: "sha256:fd80e40f0a688d5eb278a9171a4f9170aa8a9530bd21256a803245da6b5e786c"
  imagePullSecrets: []
securityImage:
  image:
    registry: docker.io
    repository: harness/sto-plugin
    tag: latest # DO NOT OVERRIDE without checking in with STO team
    digest: "sha256:87615fc86e7902a4fcbfb24c19eaa1a45a2730b89652cfacb9f191f1ba70924d"
    imagePullSecrets: []
# resources quotas
resources:
  requests:
    memory: 5G
    cpu: 1
    ephemeral-storage: 250M
  limits:
    memory: 5G
    ephemeral-storage: 250M
# autoscaling
replicaCount: 1
autoscaling:
  enabled: false
  targetCPU: 70
  targetMemory: ""
# updates
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
progressDeadlineSeconds: 300
# service
service:
  type: ClusterIP
  port: 7090
  grpcPort: 9979
  metricsPort: 8889
# ingress
virtualService:
  annotations: {}
  objects:
    - pathMatchType: prefix
      pathRewrite: "/"
      paths:
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/iacm-manager/'
ingress:
  objects:
    - annotations:
        nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/use-regex: "true"
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/iacm-manager(/|$)(.*)'
          backend:
            service:
              name: iacm-manager
# deployment configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
rbac:
  rules: []
nodeSelector: {}
tolerations: []
affinity: {}
lifecycleHooks: {}
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# security
podSecurityContext:
  fsGroup: 65534
securityContext:
  runAsUser: 65534
  runAsNonRoot: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
# additional configuration
extraVolumes: []
extraVolumeMounts: []
# harness secrets
secrets:
  default:
    VERIFICATION_SERVICE_SECRET: "67d9b94d9856665afc21acd3aa745401"
  kubernetesSecrets:
    - secretName: ""
      keys:
        VERIFICATION_SERVICE_SECRET: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          VERIFICATION_SERVICE_SECRET:
            name: ""
            property: ""
# database secrets
timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
probes:
  livenessProbe:
    httpGet:
      path: /health/liveness
      port: iacm-manager
    timeoutSeconds: 2
    periodSeconds: 5
    failureThreshold: 5
    initialDelaySeconds: 40
  readinessProbe:
    httpGet:
      path: /health
      port: iacm-manager
    timeoutSeconds: 2
    periodSeconds: 10
    failureThreshold: 5
    initialDelaySeconds: 60
  startupProbe:
    httpGet:
      path: /health
      port: iacm-manager
    timeoutSeconds: 2
    periodSeconds: 10
    failureThreshold: 25
scalabilityTest: false
iacm_images:
  harness_terraform_vm:
    image:
      registry: docker.io
      digest: "sha256:4a148a15b99088f8a58df09462c983c2f43355a4c60883beb3566d7364cb657b"
      tag: "latest"
      repository: plugins/harness_terraform_vm
      imagePullSecrets: []
  harness_terraform:
    image:
      registry: docker.io
      digest: "sha256:42a3b1ee41a3b6054b53939473fdf1aa541bdaa6e83999fbd52703b57702338c"
      tag: "latest"
      repository: plugins/harness_terraform
      imagePullSecrets: []
  addon:
    image:
      registry: docker.io
      digest: "sha256:91ae8b37b4bb6552650f2396db9b1095764dbb5dd9488d35f565be65d8e175aa"
      tag: "1.16.73"
      repository: harness/ci-addon
      imagePullSecrets: []
  addon_rootless:
    image:
      registry: docker.io
      digest: "sha256:86ffe2b485204ee82e6475f4dfdcc95f5c5e1f583b91df3e07fc1de2227f4dca"
      tag: "rootless-1.16.73"
      repository: harness/ci-addon
      imagePullSecrets: []
  lite_engine:
    image:
      registry: docker.io
      digest: "sha256:a142d6b8f0a4c36afb02e9486f25a6225115699e8bbb96273c202e60841c5677"
      tag: "1.16.73"
      repository: harness/ci-lite-engine
      imagePullSecrets: []
  lite_engine_rootless:
    image:
      registry: docker.io
      digest: "sha256:d118024984296986aee468db4faa92cf5755918be73f3e36d32af267ae53166f"
      tag: "rootless-1.16.73"
      repository: harness/ci-lite-engine
      imagePullSecrets: []
  git_clone:
    image:
      registry: docker.io
      digest: "sha256:5d9645838ffaf195feb50fe0145939e6e3eba2515c44ff4afd8991d99828905f"
      tag: "1.6.6-rootless"
      repository: harness/drone-git
      imagePullSecrets: []
# application envs
config:
  IACM_TERRAFORM_IMAGE: '{{ .Values.iacm_images.harness_terraform.image.repository }}:{{ .Values.iacm_images.harness_terraform.image.tag }}'
  IACM_OPEN_TOFU_IMAGE: '{{ .Values.iacm_images.harness_terraform.image.repository }}:{{ .Values.iacm_images.harness_terraform.image.tag }}'
  IACM_TERRAFORM_VM_IMAGE: '{{ .Values.iacm_images.harness_terraform_vm.image.repository }}:{{ .Values.iacm_images.harness_terraform_vm.image.tag }}'
  IACM_OPEN_TOFU_VM_IMAGE: '{{ .Values.iacm_images.harness_terraform_vm.image.repository }}:{{ .Values.iacm_images.harness_terraform_vm.image.tag }}'
  ACCESS_CONTROL_BASE_URL: http://access-control:9006/api/
  ACCESS_CONTROL_ENABLED: "true"
  ADDON_IMAGE: '{{ .Values.iacm_images.addon.image.repository }}:{{ .Values.iacm_images.addon.image.tag }}'
  ADDON_IMAGE_ROOTLESS: '{{ .Values.iacm_images.addon_rootless.image.repository }}:{{ .Values.iacm_images.addon_rootless.image.tag }}'
  GIT_CLONE_IMAGE: '{{ .Values.iacm_images.git_clone.image.repository }}:{{ .Values.iacm_images.git_clone.image.tag }}'
  API_URL: '{{ .Values.global.loadbalancerURL }}/ng/#/'
  ASYNC_DELEGATE_RESPONSE_THREAD_COUNT: "15"
  CACHE_BACKEND: REDIS
  CACHE_CONFIG_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache") }}'
  CACHE_CONFIG_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache") }}'
  CACHE_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  CACHE_CONFIG_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  CACHE_NAMESPACE: ""
  CACHE_SERVICE_ENDPOINT: '{{ .Values.global.loadbalancerURL }}/cache-service/'
  CF_CLIENT_CONFIG_URL: "http://ff-proxy-v2-clusterip"
  CF_CLIENT_EVENT_URL: "http://ff-proxy-v2-clusterip"
  DEFAULT_CPU_LIMIT: "500"
  DEFAULT_INTERNAL_IMAGE_CONNECTOR: account.harnessImage
  DEFAULT_MEMORY_LIMIT: "1000"
  DEPLOY_MODE: KUBERNETES_ONPREM
  DISABLE_NEW_RELIC: "true"
  DISTRIBUTED_LOCK_IMPLEMENTATION: REDIS
  ENABLE_APPDYNAMICS: "false"
  ENABLE_AUTH: "true"
  ENABLE_DASHBOARD_TIMESCALE: "true"
  ENABLE_PROMETHEUS_COLLECTOR: "true"
  ENABLE_QUEUE: "false"
  ENFORCEMENT_CHECK_ENABLED: "true"
  EVENTS_FRAMEWORK_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  EVENTS_FRAMEWORK_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "events") }}'
  EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME: harness-redis
  EVENTS_FRAMEWORK_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  FEATURE_FLAG_SYSTEM: LOCAL
  GITNESS_INTERNAL_URL: 'http://code-api.{{ .Release.Namespace }}.svc.cluster.local:80/'
  GOOGLE_APPLICATION_CREDENTIALS: /opt/harness/svc/cloud_stackdriver.json
  GRPC_SERVER_PORT: "9979"
  HARNESS_CODE_GIT_URL: '{{ .Values.global.loadbalancerURL }}/code/git'
  HOSTED_VM_SPLIT_LINUX_AMD64_POOL: "false"
  HOSTED_VM_SPLIT_LINUX_ARM64_POOL: "false"
  HOSTED_VM_SPLIT_WINDOWS_AMD64_POOL: "false"
  HSQS_BASE_URL: 'http://queue-service.{{ .Release.Namespace }}.svc.cluster.local:9091/'
  IACM_INFRACOST_API_ENDPOINT: '{{ .Values.global.loadbalancerURL }}/iac-pricing/'
  IACM_EXTERNAL_SERVICE_ENDPOINT: '{{ .Values.global.loadbalancerURL }}/iacm/'
  IACM_SERVICE_ENDPOINT: 'http://iac-server.{{ .Release.Namespace }}.svc.cluster.local:8080/'
  INTERNAL_MANAGER_AUTHORITY: harness-manager:9879
  INTERNAL_MANAGER_TARGET: harness-manager:9879
  INTERNAL_PMS_AUTHORITY: pipeline-service:12011
  INTERNAL_PMS_TARGET: pipeline-service:12011
  LE_IMAGE: '{{ .Values.iacm_images.lite_engine.image.repository }}:{{ .Values.iacm_images.lite_engine.image.tag }}'
  LE_IMAGE_ROOTLESS: '{{ .Values.iacm_images.lite_engine_rootless.image.repository }}:{{ .Values.iacm_images.lite_engine_rootless.image.tag }}'
  LOCK_CONFIG_ENV_NAMESPACE: ""
  LOCK_CONFIG_REDIS_SENTINELS: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "lock") }}'
  LOCK_CONFIG_REDIS_URL: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "lock") }}'
  LOCK_CONFIG_REDIS_USERNAME: ""
  LOCK_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  LOCK_CONFIG_USE_SENTINEL: '{{ .Values.global.database.redis.installed }}'
  LOG_SERVICE_ENDPOINT: '{{ .Values.global.loadbalancerURL }}/log-service/'
  MANAGER_AUTHORITY: harness-manager:9879
  MANAGER_TARGET: harness-manager:9879
  MANAGER_URL: 'http://harness-manager.{{ .Release.Namespace }}.svc.cluster.local:9090/api/'
  MEMORY: "2500"
  MOCK_ACCESS_CONTROL_SERVICE: "false"
  MONGO_INDEX_MANAGER_MODE: AUTO
  NG_MANAGER_URL: 'http://ng-manager.{{ .Release.Namespace }}.svc.cluster.local:7090/'
  OPA_SERVER_BASEURL: 'http://policy-mgmt.{{ .Release.Namespace }}.svc.cluster.local:3000/'
  PIE_STREAM_PER_SERVICE: "false"
  PIPELINE_SERVICE_URL: 'http://pipeline-service.{{ .Release.Namespace }}.svc.cluster.local:12001/api/'
  PMS_AUTHORITY: pipeline-service:12011
  PMS_SDK_ORCHESTRATION_EVENT_POOL_CORE_SIZE: "15"
  PMS_TARGET: pipeline-service:12011
  S3_UPLOAD_IMAGE: bewithaman/s3:latest
  SCM_SERVICE_URI: scm-service:8091
  SHOULD_CONFIGURE_WITH_PMS: "true"
  STACK_DRIVER_LOGGING_ENABLED: '{{ .Values.global.stackDriverLoggingEnabled }}'
  STO_SERVICE_ENDPOINT: '{{ .Values.global.loadbalancerURL }}/sto/'
  STO_SERVICE_INTERNAL_ENDPOINT: 'http://sto-core.{{ .Release.Namespace }}.svc.cluster.local:4000/'
  SECURITY_IMAGE: '{{ .Values.securityImage.image.repository }}:{{ .Values.securityImage.image.tag }}'
  TI_SERVICE_ENDPOINT: '{{ .Values.global.loadbalancerURL }}/ti-service/'
  USE_DMS: "false"
  USE_REDIS_FOR_SDK_RESPONSE_EVENTS: "true"
  PIPELINE_SDK_RESPONSE_EVENT_MAX_TOPIC_SIZE: "10000"
  PIPELINE_SDK_RESPONSE_SPAWN_EVENT_MAX_TOPIC_SIZE: "10000"
  PIPELINE_SDK_STEP_RESPONSE_EVENT_MAX_TOPIC_SIZE: "10000"
additionalConfigs: {}
stoServiceGlobalToken:
  name: harness-secrets
  key: stoAppHarnessToken
database:
  mongo:
    harness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    harnessiacm:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    pmsharness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    notifications:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
  redis:
    events:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        secret: ""
        enabled: false
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
    lock:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
    cache:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password
timescaleSecret:
  password:
    name: harness-secrets
    key: timescaledbPostgresPassword
jfr:
  image:
    registry: registry.access.redhat.com
    repository: ubi8/ubi-minimal
    pullPolicy: Always
    tag: "8.9-1029"
    digest: "sha256:87bcbfedfd70e67aab3875fff103bade460aeff510033ebb36b7efa009ab6639"
    imagePullSecrets: []
pdb:
  enabled: false
  minAvailable: "60%"
