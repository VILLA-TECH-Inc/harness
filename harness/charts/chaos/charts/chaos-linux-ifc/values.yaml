# Default values for chaos-manager
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  autoscaling:
    enabled: false
  pdb:
    create: false
  loadbalancerURL: "test@harness.io"
  commonAnnotations: {}
  commonLabels: {}
  monitoring:
    enabled: false
    managedPlatform: ""
    port: 8889
    path: /metrics
  airgap: false
  ha: false
  opa:
    enabled: false
  cd:
    # -- Enable to install CD
    enabled: true
  # Enable if using ingress objects
  ingress:
    enabled: false
    loadBalancerIP: '0.0.0.0'
    className: "harness"
    loadBalancerEnabled: true
    hosts:
      - ''
    tls:
      enabled: false
      secretName: harness-ssl
    objects:
      annotations: {}
    nginx:
      # -- Create Nginx Controller.  True will deploy a controller into your cluster
      create: true
    defaultbackend:
      # -- Create will deploy a default backend into your cluster
      create: true
  database:
    redis:
      ## - set this to false if you want to use external redis cluster
      installed: true
      # --  provide host name for redis
      hosts:
        - "redis-url"
      ## - key within secret containing password
      passwordKey: "password"
      ## - secret name containing external redis credentials
      secretName: "redis-user-pass"
      ## - key within secret containing username
      userKey: "username"
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
## Platform Settings
platform:
  harness-manager:
    featureFlags:
      OPA: "OPA_PIPELINE_GOVERNANCE"
      ADDITIONAL: "CHAOS_ENABLED"
replicaCount: 1
maxSurge: 1
maxUnavailable: 0
waitForInitContainer:
  image:
    registry: docker.io
    repository: harness/helm-init-container
    pullPolicy: IfNotPresent
    tag: "latest"
    digest: "sha256:c06cab15920d2f99a000f913316a76cd867c73fc8d7b2e68ba4851b39e64aa97"
    imagePullSecrets: []
image:
  registry: docker.io
  #repository: chaosnative/harness-smp-chaos-delegate-controller
  repository: harness/smp-chaos-linux-infra-controller-signed
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.57.0"
  digest: "sha256:2d99e479132673783452cf891f29120584da9193bf0e7ad473868f6cfbb15b18"
  #imagePullSecrets: ["chaos-regcred-secret"]
configmap: {}
nameOverride: ""
fullnameOverride: ""
metrics:
  metricsPort: "8889"
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "chaos-linux-ifc-sa"
podAnnotations: {}
podLabels: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
#runAsUser: 65534
#runAsNonRoot: true
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

resources:
  limits:
    memory: 512Mi
  requests:
    cpu: 500m
    memory: 512Mi
autoscaling:
  enabled: false
  targetCPU: ""
  targetMemory: ""
nodeSelector: {}
tolerations: []
affinity: {}
# extraVolumes:
#   - name: volume-test
#     configMap:
#       name: test-config
#       # readOnly: true
extraVolumes: []
# extraVolumeMounts:
#   - name: volume-test
#     mountPath: /opt/harness/config
extraVolumeMounts: []
lifecycleHooks: {}
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

service:
  annotations: {}
  type: ClusterIP
  port: 8091
  targetport: 8091
ingress:
  objects:
    - name: chaos-linux-ifc
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
        nginx.ingress.kubernetes.io/use-regex: "true"
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/chaos/lcontroller/api(/|$)(.*)'
          backend:
            service:
              name: chaos-linux-ifc-service
database:
  redis:
    cache:
      enabled: false
      protocol: ""
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
                REDIS_CA:
                  name: ""
                  property: ""
                REDIS_SSL_CA_TRUST_STORE_PASSWORD:
                  name: ""
                  property: ""
secrets:
  default:
    CHAOS_SERVICE_JWT_SECRET: "IC04LYMBf1lDP5oeY4hupxd4HJhLmN6azUku3xEbeE3SUx5G3ZYzhbiwVtK4i7AmqyU9OZkwB4v8E9qM"
    NG_JWT_SECRET: "IC04LYMBf1lDP5oeY4hupxd4HJhLmN6azUku3xEbeE3SUx5G3ZYzhbiwVtK4i7AmqyU9OZkwB4v8E9qM"
    JWT_SECRET: "dOkdsVqdRPPRJG31XU0qY4MPqmBBMk0PTAGIKM6O7TGqhjyxScIdJe80mwh5Yb5zF3KxYBHw6B3Lfzlq"
    JWT_IDENTITY_SERVICE_SECRET: "HVSKUYqD4e5Rxu12hFDdCJKGM64sxgEynvdDhaOHaTHhwwn0K4Ttr0uoOxSsEVYNrUU="
    LOG_SERVICE_TOKEN: "c76e567a-b341-404d-a8dd-d9738714eb82"
  kubernetesSecrets:
    - secretName: ""
      keys:
        CHAOS_SERVICE_JWT_SECRET: ""
        NG_JWT_SECRET: ""
        JWT_SECRET: ""
        JWT_IDENTITY_SERVICE_SECRET: ""
        LOG_SERVICE_TOKEN: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          CHAOS_SERVICE_JWT_SECRET:
            name: ""
            property: ""
          NG_JWT_SECRET:
            name: ""
            property: ""
          JWT_SECRET:
            name: ""
            property: ""
          JWT_IDENTITY_SERVICE_SECRET:
            name: ""
            property: ""
          LOG_SERVICE_TOKEN:
            name: ""
            property: ""
config:
  IFS_ENDPOINT: "http://chaos-linux-ifs-service:4000"
  METRIC_PORT: '{{ .Values.metrics.metricsPort }}'
  CLEANUP_WINDOW: "4"
  CHAOS_MANAGER_ENDPOINT: http://chaos-manager-service:8080
  REDIS_CACHE_SSL_ENABLED: "false"
  REDIS_CACHE_NAMESPACE: ""
  REDIS_CACHE_CERT_PATH: ""
  REDIS_CACHE_DATABASE: "0"
  REDIS_CACHE_ENDPOINT: '{{ include "harnesscommon.dbv3.redisConnection" (dict "ctx" $ "database" "cache") }}'
pdb:
  create: false
