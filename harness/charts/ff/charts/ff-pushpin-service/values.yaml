# @format

# Default values for ci-manager
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  loadbalancerURL: "test@harness.io"
  airgap: false
  ha: false
  commonAnnotations: {}
  commonLabels: {}
  # Enable if using ingress objects
  database:
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      hosts:
        - timescaledb-single-chart:5432
      # -- Enable TimescaleDB SSL
      sslEnabled: false
      # -- TimescaleDB secrets
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      certKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
            TIMESCALEDB_USERNAME: ""
            TIMESCALEDB_PASSWORD: ""
            TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  ingress:
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ""
    # -- add annotations to ingress objects
    objects:
      annotations: {}
  istio:
    # -- create virtualServices objects
    enabled: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      gateways:
      hosts:
  imagePullSecrets: []
timescaledb:
  protocol: ""
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secretName: ""
  userKey: ""
  passwordKey: ""
  extraArgs: ""
  certName: ""
  certKey: ""
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
        TIMESCALEDB_USERNAME: ""
        TIMESCALEDB_PASSWORD: ""
        TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
redis:
  protocol: ""
  # --  provide default values if redis.installed is set to false
  hosts: []
  extraArgs: ""
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          REDIS_USERNAME: ""
          REDIS_PASSWORD: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            REDIS_USERNAME:
              name: ""
              property: ""
            REDIS_PASSWORD:
              name: ""
              property: ""
replicaCount: 1
maxSurge: 1
maxUnavailable: 0
waitForInitContainer:
  image:
    registry: docker.io
    repository: harness/helm-init-container
    pullPolicy: IfNotPresent
    tag: "latest"
    digest: "sha256:c06cab15920d2f99a000f913316a76cd867c73fc8d7b2e68ba4851b39e64aa97"
    imagePullSecrets: []
pushpin:
  image:
    registry: docker.io
    repository: harness/ff-pushpin-signed
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.11"
    digest: "sha256:126228266b946936981598f7facecd777aa6eca6f511ff0127ae34e2fa333148"
    imagePullSecrets: []
  resources:
    limits:
      memory: 2048Mi
    requests:
      cpu: 1
      memory: 2048Mi
pushpinworker:
  image:
    registry: docker.io
    repository: harness/ff-pushpin-worker-signed
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.1079.1"
    digest: "sha256:f0a54d634218e33904239818888906145fd5d96ca23bb2405c531187ac0b838d"
    imagePullSecrets: []
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
  resources:
    limits:
      memory: 2048Mi
    requests:
      cpu: 1
      memory: 2048Mi
configmap: {}
memory: 4096
appLogLevel: INFO
nameOverride: ""
fullnameOverride: ""
timescaleSecret:
  password:
    name: harness-secrets
    key: timescaledbPostgresPassword
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-default"
podAnnotations: {}
podLabels: {}
podSecurityContext: {}
# fsGroup: 2000

service:
  annotations: {}
  type: ClusterIP
  port17001: 17001
  targetport17001: 7999
  port17002: 17002
  targetport17002: 443
  port17003: 17003
  targetport17003: 5561
virtualService:
  annotations: {}
ingress:
  annotations: {}
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPU: ""
  targetMemory: ""
nodeSelector: {}
tolerations: []
affinity: {}
# extraVolumes:
#   - name: volume-test
#     configMap:
#       name: test-config
#       # readOnly: true
extraVolumes: []
# extraVolumeMounts:
#   - name: volume-test
#     mountPath: /opt/harness/config
extraVolumeMounts: []
lifecycleHooks: {}
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

image:
  registry: docker.io
  repository: harness/ff-pushpin-signed
  tag: 1.1.0
  digest: "sha256:64fd55386dade6d6e7f4b697d018c9dbf5bde7eab537a34913b654d3a439c08c"
