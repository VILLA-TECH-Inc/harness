apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "code-githa.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "code-githa.labels" . | nindent 4 }}
    {{- if .Values.global.commonLabels }}
    {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.global.commonAnnotations }}
  annotations: {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.instances }}
  selector:
    matchLabels:
      {{- include "code-githa.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  minReadySeconds: 10
  template:
    metadata:
      labels:
        app: {{ include "code-githa.name" . }}
        {{- include "code-githa.selectorLabels" . | nindent 8 }}
        {{- if .Values.global.commonLabels }}
        {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
        {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- include "code-githa.pullSecrets" . | nindent 6 }}
      volumes:
      {{- include "harnesscommon.renderSecretsAsVolumes" (dict "ctx" $) | indent 6 }}
      - name: config-volume
        configMap:
          name: {{ include "code-githa.name" . }}-nodes
      {{- if .Values.postgres.sslMode }}
      - name: certs
        emptyDir: {}
      - name: secret-certs
        secret:
          secretName: {{ include "code-githa.name" . }}-certs
          defaultMode: 0400
      {{ end }}
      # by default kubernetes will force shutdown a pod in 30s. need to give gitrpc "graceFulShutDownTime"+waitting time before terminate a pod.
      terminationGracePeriodSeconds: {{ add .Values.config.CODE_SERVER_GRACEFUL_SHUTDOWN_TIME 5 }}
      serviceAccountName: {{ include "code-githa.serviceAccountName" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      {{- if .Values.global.database.postgres.installed }}
        {{ include "harnesscommon.initContainer.waitForContainer" (dict "root" . "containerName" "wait-for-postgres" "appName" "postgres") | nindent 8}}
      {{- end }}
      {{- if .Values.initializeDatabase.enabled }}
        - name: create-db-if-not-exists
          image: {{ include "common.images.image" (dict "imageRoot" .Values.postgres.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
          env:
          - name: POSTGRES_HOST
            value: {{include "harnesscommon.dbconnectionv2.postgresHost" (dict "context" .) }}
          {{- include "harnesscommon.dbconnectionv2.postgresEnv" (dict "ctx" $ "userVariableName" "POSTGRES_USER" "passwordVariableName" "POSTGRES_PASSWORD") | indent 10 }}
          command:
          - "bin/bash"
          - "-c"
          - echo "SELECT 'CREATE DATABASE code_db_githa' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'code_db_githa')\gexec"  | PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -h ${POSTGRES_HOST}
      {{- end }}
      {{- if .Values.postgres.sslMode }}
        - name: setup-certs
          image: {{ include "common.images.image" (dict "imageRoot" .Values.busybox.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.busybox.image.pullPolicy }}
          volumeMounts:
          {{- include "harnesscommon.mountRenderedSecretsAsVolumeMounts" (dict "ctx" $) | indent 10}}
          - name: certs
            mountPath: "/opt/harness/certs"
          command:
            - /bin/sh
            - -c
            - |
              cp -LR /tmp/secret-certs/. /opt/harness/certs/ &&
              chmod -R a=,u=rX /opt/harness/certs && \
              chown -R 1001:1001 /opt/harness/certs
      {{ end }}
      containers:
      - name: githa
        image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsUser: 1001
          allowPrivilegeEscalation: false
        envFrom:
          - configMapRef:
              name: {{ include "code-githa.name" . }}
          - secretRef:
              name: {{ include "code-githa.name" . }}
        env:
          {{- include "harnesscommon.dbconnectionv2.postgresEnv" (dict "ctx" $ "userVariableName" "POSTGRES_USER" "passwordVariableName" "POSTGRES_PASSWORD") | indent 10 }}
          {{- include "harnesscommon.dbv3.redisEnv"  (dict "ctx" $ "database" "code-githa" "userVariableName" "GITHA_REDIS_USERNAME" "passwordVariableName" "GITHA_REDIS_PASSWORD") | indent 10 }}
          - name: GITHA_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: GITHA_API_URL
            value: "http://$(GITHA_IP):{{ .Values.config.CODE_GITHA_HTTP_SERVER_PORT }}/api"
          - name: GITHA_DATABASE_DATASOURCE
            value: {{ include "harnesscommon.dbconnectionv2.postgresConnection" (dict "ctx" $ "database" "code_db_githa" "keywordValueConnectionString" true "userVariableName" "$(POSTGRES_USER)" "passwordVariableName" "$(POSTGRES_PASSWORD)" ) | quote }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
          {{- include "harnesscommon.dbv4.sslVolumeMount" (dict "context" $ "dbType" "redis" "dbName" "code-githa") | nindent 10 }}
          - name: config-volume
            mountPath: /app/config
          {{- if .Values.postgres.sslMode }}
          - name: certs
            mountPath: "/opt/harness/certs"
          {{ end }}
        ports:
        - name: githa-grpc
          containerPort: {{ .Values.config.CODE_GITHA_GRPC_SERVER_PORT }}
          protocol: "TCP"
        - name: githa-http
          containerPort: {{ .Values.config.CODE_GITHA_HTTP_SERVER_PORT }}
          protocol: "TCP"
